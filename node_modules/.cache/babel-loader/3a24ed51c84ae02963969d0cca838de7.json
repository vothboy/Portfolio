{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nvar ms_rest_azure_env_1 = require(\"@azure/ms-rest-azure-env\");\n\nvar adal_node_1 = require(\"adal-node\");\n\nvar TokenCredentialsBase = /*#__PURE__*/function () {\n  function TokenCredentialsBase(clientId, domain, tokenAudience) {\n    var environment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ms_rest_azure_env_1.Environment.AzureCloud;\n    var tokenCache = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new adal_node_1.MemoryCache();\n\n    _classCallCheck(this, TokenCredentialsBase);\n\n    this.clientId = clientId;\n    this.domain = domain;\n    this.tokenAudience = tokenAudience;\n    this.environment = environment;\n    this.tokenCache = tokenCache;\n\n    if (!clientId || typeof clientId.valueOf() !== \"string\") {\n      throw new Error(\"clientId must be a non empty string.\");\n    }\n\n    if (!domain || typeof domain.valueOf() !== \"string\") {\n      throw new Error(\"domain must be a non empty string.\");\n    }\n\n    if (this.tokenAudience === \"graph\" && this.domain.toLowerCase() === \"common\") {\n      throw new Error(\"If the tokenAudience is specified as \\\"graph\\\" then \\\"domain\\\" cannot be defaulted to \\\"commmon\\\" tenant.\\\n        It must be the actual tenant (preferrably a string in a guid format).\");\n    }\n\n    var authorityUrl = this.environment.activeDirectoryEndpointUrl + this.domain;\n    this.authContext = new adal_node_1.AuthenticationContext(authorityUrl, this.environment.validateAuthority, this.tokenCache);\n  }\n\n  _createClass(TokenCredentialsBase, [{\n    key: \"getActiveDirectoryResourceId\",\n    value: function getActiveDirectoryResourceId() {\n      var resource = this.environment.activeDirectoryResourceId;\n\n      if (this.tokenAudience) {\n        resource = this.tokenAudience;\n\n        if (this.tokenAudience.toLowerCase() === \"graph\") {\n          resource = this.environment.activeDirectoryGraphResourceId;\n        } else if (this.tokenAudience.toLowerCase() === \"batch\") {\n          resource = this.environment.batchResourceId;\n        }\n      }\n\n      return resource;\n    }\n  }, {\n    key: \"getTokenFromCache\",\n    value: function getTokenFromCache(username) {\n      var self = this;\n      var resource = this.getActiveDirectoryResourceId();\n      return new Promise(function (resolve, reject) {\n        self.authContext.acquireToken(resource, username, self.clientId, function (error, tokenResponse) {\n          if (error) {\n            return reject(error);\n          }\n\n          if (tokenResponse.error || tokenResponse.errorDescription) {\n            return reject(tokenResponse);\n          }\n\n          return resolve(tokenResponse);\n        });\n      });\n    }\n    /**\n     * Signs a request with the Authentication header.\n     *\n     * @param {webResource} The WebResource to be signed.\n     * @param {function(error)}  callback  The callback function.\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tokenResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getToken();\n\n              case 2:\n                tokenResponse = _context.sent;\n                webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, \"\".concat(tokenResponse.tokenType, \" \").concat(tokenResponse.accessToken));\n                return _context.abrupt(\"return\", Promise.resolve(webResource));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return TokenCredentialsBase;\n}();\n\nexports.TokenCredentialsBase = TokenCredentialsBase;","map":null,"metadata":{},"sourceType":"script"}