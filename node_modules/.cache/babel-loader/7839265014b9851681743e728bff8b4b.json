{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPacketComplete = isPacketComplete;\nexports.packetLength = packetLength;\nexports.Packet = exports.OFFSET = exports.TYPE = exports.HEADER_LENGTH = void 0;\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar HEADER_LENGTH = 8;\nexports.HEADER_LENGTH = HEADER_LENGTH;\nvar TYPE = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\nexports.TYPE = TYPE;\nvar typeByValue = {};\n\nfor (var name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\n\nvar STATUS = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\nvar OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\nexports.OFFSET = OFFSET;\nvar DEFAULT_SPID = 0;\nvar DEFAULT_PACKETID = 1;\nvar DEFAULT_WINDOW = 0;\nvar NL = '\\n';\n\nvar Packet = /*#__PURE__*/function () {\n  function Packet(typeOrBuffer) {\n    _classCallCheck(this, Packet);\n\n    this.buffer = void 0;\n\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      var type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n\n  _createClass(Packet, [{\n    key: \"setLength\",\n    value: function setLength() {\n      this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.buffer.readUInt16BE(OFFSET.Length);\n    }\n  }, {\n    key: \"resetConnection\",\n    value: function resetConnection(reset) {\n      var status = this.buffer.readUInt8(OFFSET.Status);\n\n      if (reset) {\n        status |= STATUS.RESETCONNECTION;\n      } else {\n        status &= 0xFF - STATUS.RESETCONNECTION;\n      }\n\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n  }, {\n    key: \"last\",\n    value: function last(_last) {\n      var status = this.buffer.readUInt8(OFFSET.Status);\n\n      if (arguments.length > 0) {\n        if (_last) {\n          status |= STATUS.EOM;\n        } else {\n          status &= 0xFF - STATUS.EOM;\n        }\n\n        this.buffer.writeUInt8(status, OFFSET.Status);\n      }\n\n      return this.isLast();\n    }\n  }, {\n    key: \"ignore\",\n    value: function ignore(last) {\n      var status = this.buffer.readUInt8(OFFSET.Status);\n\n      if (last) {\n        status |= STATUS.IGNORE;\n      } else {\n        status &= 0xFF - STATUS.IGNORE;\n      }\n\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n  }, {\n    key: \"isLast\",\n    value: function isLast() {\n      return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n    }\n  }, {\n    key: \"packetId\",\n    value: function packetId(_packetId) {\n      if (_packetId) {\n        this.buffer.writeUInt8(_packetId % 256, OFFSET.PacketID);\n      }\n\n      return this.buffer.readUInt8(OFFSET.PacketID);\n    }\n  }, {\n    key: \"addData\",\n    value: function addData(data) {\n      this.buffer = Buffer.concat([this.buffer, data]);\n      this.setLength();\n      return this;\n    }\n  }, {\n    key: \"data\",\n    value: function data() {\n      return this.buffer.slice(HEADER_LENGTH);\n    }\n  }, {\n    key: \"type\",\n    value: function type() {\n      return this.buffer.readUInt8(OFFSET.Type);\n    }\n  }, {\n    key: \"statusAsString\",\n    value: function statusAsString() {\n      var status = this.buffer.readUInt8(OFFSET.Status);\n      var statuses = [];\n\n      for (var _name in STATUS) {\n        var value = STATUS[_name];\n\n        if (status & value) {\n          statuses.push(_name);\n        } else {\n          statuses.push(undefined);\n        }\n      }\n\n      return statuses.join(' ').trim();\n    }\n  }, {\n    key: \"headerToString\",\n    value: function headerToString() {\n      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n      return indent + text;\n    }\n  }, {\n    key: \"dataToString\",\n    value: function dataToString() {\n      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var BYTES_PER_GROUP = 0x04;\n      var CHARS_PER_GROUP = 0x08;\n      var BYTES_PER_LINE = 0x20;\n      var data = this.data();\n      var dataDump = '';\n      var chars = '';\n\n      for (var offset = 0; offset < data.length; offset++) {\n        if (offset % BYTES_PER_LINE === 0) {\n          dataDump += indent;\n          dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\n        }\n\n        if (data[offset] < 0x20 || data[offset] > 0x7E) {\n          chars += '.';\n\n          if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n            chars += ' ';\n          }\n        } else {\n          chars += String.fromCharCode(data[offset]);\n        }\n\n        if (data[offset] != null) {\n          dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\n        }\n\n        if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          dataDump += ' ';\n        }\n\n        if ((offset + 1) % BYTES_PER_LINE === 0) {\n          dataDump += '  ' + chars;\n          chars = '';\n\n          if (offset < data.length - 1) {\n            dataDump += NL;\n          }\n        }\n      }\n\n      if (chars.length) {\n        dataDump += '  ' + chars;\n      }\n\n      return dataDump;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n    }\n  }, {\n    key: \"payloadString\",\n    value: function payloadString() {\n      return '';\n    }\n  }]);\n\n  return Packet;\n}();\n\nexports.Packet = Packet;\n\nfunction isPacketComplete(potentialPacketBuffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\n\nfunction packetLength(potentialPacketBuffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}","map":null,"metadata":{},"sourceType":"script"}