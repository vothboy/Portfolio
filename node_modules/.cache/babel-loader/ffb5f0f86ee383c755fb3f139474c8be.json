{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\n\nvar globalDate = global.Date;\nvar YEAR_ONE = new globalDate(2000, 0, -730118);\nvar UTC_YEAR_ONE = globalDate.UTC(2000, 0, -730118);\nvar Date = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n  declaration: function declaration() {\n    return 'date';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(this.id);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt8(3);\n\n      if (options.useUTC) {\n        buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      } else {\n        var dstDiff = -(parameter.value.getTimezoneOffset() - YEAR_ONE.getTimezoneOffset()) * 60 * 1000;\n        buffer.writeUInt24LE(Math.floor((+parameter.value - +YEAR_ONE + dstDiff) / 86400000));\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: value is techincally of type 'unknown'.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = new globalDate(globalDate.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = Date;\nexports.default = _default;\nmodule.exports = Date;","map":null,"metadata":{},"sourceType":"script"}