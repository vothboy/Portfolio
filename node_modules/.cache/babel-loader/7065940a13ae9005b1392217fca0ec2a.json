{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = exports.isolationLevelByValue = exports.ISOLATION_LEVEL = exports.OPERATION_TYPE = void 0;\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _allHeaders = require(\"./all-headers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n  s2.2.6.8\n */\n\n\nvar OPERATION_TYPE = {\n  TM_GET_DTC_ADDRESS: 0x00,\n  TM_PROPAGATE_XACT: 0x01,\n  TM_BEGIN_XACT: 0x05,\n  TM_PROMOTE_XACT: 0x06,\n  TM_COMMIT_XACT: 0x07,\n  TM_ROLLBACK_XACT: 0x08,\n  TM_SAVE_XACT: 0x09\n};\nexports.OPERATION_TYPE = OPERATION_TYPE;\nvar ISOLATION_LEVEL = {\n  NO_CHANGE: 0x00,\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n};\nexports.ISOLATION_LEVEL = ISOLATION_LEVEL;\nvar isolationLevelByValue = {};\nexports.isolationLevelByValue = isolationLevelByValue;\n\nfor (var name in ISOLATION_LEVEL) {\n  var value = ISOLATION_LEVEL[name];\n  isolationLevelByValue[value] = name;\n}\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(name) {\n    var isolationLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ISOLATION_LEVEL.NO_CHANGE;\n\n    _classCallCheck(this, Transaction);\n\n    this.name = void 0;\n    this.isolationLevel = void 0;\n    this.outstandingRequestCount = void 0;\n    this.name = name;\n    this.isolationLevel = isolationLevel;\n    this.outstandingRequestCount = 1;\n  }\n\n  _createClass(Transaction, [{\n    key: \"beginPayload\",\n    value: function beginPayload(txnDescriptor) {\n      var _this = this;\n\n      var buffer = new _writableTrackingBuffer.default(100, 'ucs2');\n      (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);\n      buffer.writeUShort(OPERATION_TYPE.TM_BEGIN_XACT);\n      buffer.writeUInt8(this.isolationLevel);\n      buffer.writeUInt8(this.name.length * 2);\n      buffer.writeString(this.name, 'ucs2');\n      return {\n        getData: function getData(cb) {\n          cb(buffer.data);\n        },\n        toString: function toString() {\n          return 'Begin Transaction: name=' + _this.name + ', isolationLevel=' + isolationLevelByValue[_this.isolationLevel];\n        }\n      };\n    }\n  }, {\n    key: \"commitPayload\",\n    value: function commitPayload(txnDescriptor) {\n      var _this2 = this;\n\n      var buffer = new _writableTrackingBuffer.default(100, 'ascii');\n      (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);\n      buffer.writeUShort(OPERATION_TYPE.TM_COMMIT_XACT);\n      buffer.writeUInt8(this.name.length * 2);\n      buffer.writeString(this.name, 'ucs2'); // No fBeginXact flag, so no new transaction is started.\n\n      buffer.writeUInt8(0);\n      return {\n        getData: function getData(cb) {\n          cb(buffer.data);\n        },\n        data: buffer.data,\n        toString: function toString() {\n          return 'Commit Transaction: name=' + _this2.name;\n        }\n      };\n    }\n  }, {\n    key: \"rollbackPayload\",\n    value: function rollbackPayload(txnDescriptor) {\n      var _this3 = this;\n\n      var buffer = new _writableTrackingBuffer.default(100, 'ascii');\n      (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);\n      buffer.writeUShort(OPERATION_TYPE.TM_ROLLBACK_XACT);\n      buffer.writeUInt8(this.name.length * 2);\n      buffer.writeString(this.name, 'ucs2'); // No fBeginXact flag, so no new transaction is started.\n\n      buffer.writeUInt8(0);\n      return {\n        getData: function getData(cb) {\n          cb(buffer.data);\n        },\n        toString: function toString() {\n          return 'Rollback Transaction: name=' + _this3.name;\n        }\n      };\n    }\n  }, {\n    key: \"savePayload\",\n    value: function savePayload(txnDescriptor) {\n      var _this4 = this;\n\n      var buffer = new _writableTrackingBuffer.default(100, 'ascii');\n      (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);\n      buffer.writeUShort(OPERATION_TYPE.TM_SAVE_XACT);\n      buffer.writeUInt8(this.name.length * 2);\n      buffer.writeString(this.name, 'ucs2');\n      return {\n        getData: function getData(cb) {\n          cb(buffer.data);\n        },\n        toString: function toString() {\n          return 'Save Transaction: name=' + _this4.name;\n        }\n      };\n    }\n  }, {\n    key: \"isolationLevelToTSQL\",\n    value: function isolationLevelToTSQL() {\n      switch (this.isolationLevel) {\n        case ISOLATION_LEVEL.READ_UNCOMMITTED:\n          return 'READ UNCOMMITTED';\n\n        case ISOLATION_LEVEL.READ_COMMITTED:\n          return 'READ COMMITTED';\n\n        case ISOLATION_LEVEL.REPEATABLE_READ:\n          return 'REPEATABLE READ';\n\n        case ISOLATION_LEVEL.SERIALIZABLE:\n          return 'SERIALIZABLE';\n\n        case ISOLATION_LEVEL.SNAPSHOT:\n          return 'SNAPSHOT';\n      }\n\n      return '';\n    }\n  }]);\n\n  return Transaction;\n}();\n\nexports.Transaction = Transaction;","map":null,"metadata":{},"sourceType":"script"}