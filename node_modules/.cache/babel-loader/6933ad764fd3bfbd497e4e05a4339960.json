{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar request = require('request');\n\nvar argument = require('./argument');\n\nvar log = require('./log');\n\nvar util = require('./util');\n\nvar HttpErrorCode = require('./constants').HttpError;\n/*\r\n * Constants\r\n */\n\n\nvar consts = {\n  AUTHORIZATION_URI: 'authorization_uri',\n  RESOURCE: 'resource',\n  WWW_AUTHENTICATE_HEADER: 'www-authenticate'\n};\n/**\r\n * The AuthenticationParameters class holds the parameters that are parsed from an OAuth challenge\r\n * in the www-authenticate header.\r\n * @constructor\r\n * @param {string} authorizationUri The URI of an authority that can issues tokens for the\r\n *                                  resource that issued the challenge.\r\n * @param {string} resource         The resource for a which a token should be requested from the authority.\r\n */\n\nfunction AuthenticationParameters(authorizationUri, resource) {\n  this._authorizationUri = authorizationUri;\n  this._resource = resource;\n}\n/**\r\n * The URI of an authority that can issues tokens for the resource that issued the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\n\n\nObject.defineProperty(AuthenticationParameters.prototype, 'authorizationUri', {\n  get: function get() {\n    return this._authorizationUri;\n  }\n});\n/**\r\n * The resource for a which a token should be requested from the authority.\r\n * This property may be undefined if the resource was not returned in the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\n\nObject.defineProperty(AuthenticationParameters.prototype, 'resource', {\n  get: function get() {\n    return this._resource;\n  }\n});\nvar exports = {}; // The 401 challenge is a standard defined in RFC6750, which is based in part on RFC2617.\n// The challenge has the following form.\n// WWW-Authenticate : Bearer authorization_uri=\"https://login.windows.net/mytenant.com/oauth2/authorize\",Resource_id=\"00000002-0000-0000-c000-000000000000\"\n// This regex is used to validate the structure of the challenge header.\n// Match whole structure: ^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$\n// ^                        Start at the beginning of the string.\n// \\s*Bearer\\s+             Match 'Bearer' surrounded by one or more amount of whitespace.\n// ([^,\\s=\"]+?)             This cpatures the key which is composed of any characters except comma, whitespace or a quotes.\n// =                        Match the = sign.\n// \"([^\"]*?)\"               Captures the value can be any number of non quote characters.  At this point only the first key value pair as been captured.\n// \\s*                      There can be any amount of white space after the first key value pair.\n// (                        Start a capture group to retrieve the rest of the key value pairs that are separated by commas.\n//    \\s*                   There can be any amount of whitespace before the comma.\n//    ,                     There must be a comma.\n//    \\s*                   There can be any amount of whitespace after the comma.\n//    (([^,\\s=\"]+?)         This will capture the key that comes after the comma.  It's made of a series of any character excpet comma, whitespace or quotes.\n//    =                     Match the equal sign between the key and value.\n//    \"                     Match the opening quote of the value.\n//    ([^\"]*?)              This will capture the value which can be any number of non quote characters.\n//    \"                     Match the values closing quote.\n//    \\s*                   There can be any amount of whitespace before the next comma.\n// )*                       Close the capture group for key value pairs.  There can be any number of these.\n// $                      The rest of the string can be whitespace but nothing else up to the end of the string.\n//\n//\n// In other some other languages the regex above would be all that was needed. However, in JavaScript the RegExp object does not\n// return all of the captures in one go.  So the regex above needs to be broken up so that captures can be retrieved\n// iteratively.\n//\n\nfunction parseChallenge(challenge) {\n  // This regex checks the structure of the whole challenge header.  The complete\n  // header needs to be checked for validity before we can be certain that\n  // we will succeed in pulling out the individual parts.\n  var bearerChallengeStructureValidation = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$/; // This regex pulls out the key and value from the very first pair.\n\n  var firstKeyValuePairRegex = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*/; // This regex is used to pull out all of the key value pairs after the first one.\n  // All of these begin with a comma.\n\n  var allOtherKeyValuePairRegex = /(?:,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)/g;\n\n  if (!bearerChallengeStructureValidation.test(challenge)) {\n    throw new Error('The challenge is not parseable as an RFC6750 OAuth2 challenge');\n  }\n\n  var challengeParameters = {};\n\n  for (var match = firstKeyValuePairRegex.exec(challenge); match; match = allOtherKeyValuePairRegex.exec(challenge)) {\n    challengeParameters[match[1]] = match[2];\n  }\n\n  return challengeParameters;\n}\n\nexports.AuthenticationParameters = AuthenticationParameters;\n/**\r\n * Creates an {@link AuthenticationParameters} object from the contents of a\r\n * www-authenticate header received from a HTTP 401 response from a resource server.\r\n * @param  {string} challenge The content fo the www-authenticate header.\r\n * @return {AuthenticationParameters}           An AuthenticationParameters object containing the parsed values from the header.\r\n */\n\nexports.createAuthenticationParametersFromHeader = function (challenge) {\n  argument.validateStringParameter(challenge, 'challenge');\n  var challengeParameters = parseChallenge(challenge);\n  var authorizationUri = challengeParameters[consts.AUTHORIZATION_URI];\n\n  if (!authorizationUri) {\n    throw new Error('Could not find \\'authorization_uri\\' in challenge header.');\n  }\n\n  var resource = challengeParameters[consts.RESOURCE];\n  return new AuthenticationParameters(authorizationUri, resource);\n};\n/**\r\n * Create an {@link AuthenticationParameters} object from a node http.IncomingMessage\r\n * object that was created as a result of a request to a resource server.  This function\r\n * expects the response to contain a HTTP 401 error code with a www-authenticate\r\n * header.\r\n * @param  {http.IncomingMessage} response A response from a http request to a resource server.\r\n * @return {AuthenticationParameters}\r\n */\n\n\nexports.createAuthenticationParametersFromResponse = function (response) {\n  if (!response) {\n    throw new Error('Mising required parameter: response');\n  }\n\n  if (!response.statusCode) {\n    throw new Error('The response parameter does not have the expected HTTP statusCode field');\n  }\n\n  if (HttpErrorCode.UNAUTHORIZED !== response.statusCode) {\n    throw new Error('The response status code does not correspond to an OAuth challenge.  ' + 'The statusCode is expected to be 401 but is: ' + response.statusCode);\n  }\n\n  if (!response.headers) {\n    throw new Error('There were no headers found in the response.');\n  }\n\n  var challenge = response.headers[consts.WWW_AUTHENTICATE_HEADER];\n\n  if (!challenge) {\n    throw new Error('The response does not contain a WWW-Authenticate header that can be used to determine the authority_uri and resource.');\n  }\n\n  return exports.createAuthenticationParametersFromHeader(challenge);\n};\n\nfunction validateUrlObject(url) {\n  if (!url || !url.href) {\n    throw new Error('Parameter is of wrong type: url');\n  }\n}\n/**\r\n * This is the callback that is passed to all acquireToken variants below.\r\n * @callback CreateAuthenticationParametersCallback\r\n * @memberOf AuthenticationContext\r\n * @param {Error}  [error]           If the request fails this parameter will contain an Error object.\r\n * @param {AuthenticationParameters} [parameters]   On a succesful request returns a {@link AuthenticationParameters}.\r\n */\n\n/**\r\n * Creates an {@link AuthenticationParameters} object by sending a get request\r\n * to the url passed to this function, and parsing the resulting http 401\r\n * response.\r\n * @param  {string|url}               url               The url of a resource server.\r\n * @param  {AuthenticationParameters} callback          Called on error or request completion.\r\n * @param  {string}                   [correlationId]   An optional correlationId to pass along with the request and to include in any logs.\r\n */\n\n\nexports.createAuthenticationParametersFromUrl = function (url, callback, correlationId) {\n  argument.validateCallbackType(callback);\n\n  try {\n    if (!url) {\n      callback(new Error('Missing required parameter: url'));\n      return;\n    }\n\n    var challengeUrl;\n\n    if ('string' === typeof url) {\n      challengeUrl = url;\n    } else {\n      validateUrlObject(url);\n      challengeUrl = url.href;\n    }\n\n    var logContext = log.createLogContext(correlationId);\n    var logger = new log.Logger('AuthenticationParameters', logContext);\n    logger.verbose('Attempting to retrieve authentication parameters');\n    logger.verbose('Attempting to retrieve authentication parameters from: ' + challengeUrl, true);\n    var options = util.createRequestOptions({\n      _callContext: {\n        _logContext: logContext\n      }\n    });\n    request.get(challengeUrl, options, function (err, response) {\n      if (err) {\n        logger.error('Authentication parameters http get failed.', err, true);\n        callback(err);\n        return;\n      }\n\n      var parameters;\n\n      try {\n        parameters = exports.createAuthenticationParametersFromResponse(response);\n      } catch (creationErr) {\n        logger.error('Unable to parse response in to authentication paramaters.', creationErr, true);\n        callback(creationErr);\n        return;\n      }\n\n      callback(null, parameters);\n    });\n  } catch (err) {\n    callback(err);\n    return;\n  }\n};\n\nmodule.exports = exports;","map":null,"metadata":{},"sourceType":"script"}