{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\n * @class MSIAppServiceTokenCredentials\n */\n\n\nvar MSIAppServiceTokenCredentials = /*#__PURE__*/function (_msiTokenCredentials_) {\n  _inherits(MSIAppServiceTokenCredentials, _msiTokenCredentials_);\n\n  /**\n   * Creates an instance of MSIAppServiceTokenCredentials.\n   * @param {string} [options.msiEndpoint] - The local URL from which your app can request tokens.\n   * Either provide this parameter or set the environment variable `MSI_ENDPOINT`.\n   * For example: `MSI_ENDPOINT=\"http://127.0.0.1:41741/MSI/token/\"`\n   * @param {string} [options.msiSecret] - The secret used in communication between your code and the local MSI agent.\n   * Either provide this parameter or set the environment variable `MSI_SECRET`.\n   * For example: `MSI_SECRET=\"69418689F1E342DD946CB82994CDA3CB\"`\n   * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n   * For e.g. it can be:\n   * - resource management endpoint \"https://management.azure.com/\" (default)\n   * - management endpoint \"https://management.core.windows.net/\"\n   * @param {string} [options.msiApiVersion] - The api-version of the local MSI agent. Default value is \"2017-09-01\".\n   */\n  function MSIAppServiceTokenCredentials(options) {\n    var _this;\n\n    _classCallCheck(this, MSIAppServiceTokenCredentials);\n\n    if (!options) options = {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MSIAppServiceTokenCredentials).call(this, options));\n    options.msiEndpoint = options.msiEndpoint || process.env[\"MSI_ENDPOINT\"];\n    options.msiSecret = options.msiSecret || process.env[\"MSI_SECRET\"];\n\n    if (!options.msiEndpoint || options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' + 'or set the environment variable \"MSI_ENDPOINT\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiSecret || options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' + 'or set the environment variable \"MSI_SECRET\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiApiVersion) {\n      options.msiApiVersion = \"2017-09-01\";\n    } else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\n      throw new Error(\"msiApiVersion must be a uri.\");\n    }\n\n    _this.msiEndpoint = options.msiEndpoint;\n    _this.msiSecret = options.msiSecret;\n    _this.msiApiVersion = options.msiApiVersion;\n    return _this;\n  }\n  /**\n   * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\n   * @return {Promise<MSITokenResponse>} Promise with the tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  _createClass(MSIAppServiceTokenCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var reqOptions, opRes, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reqOptions = this.prepareRequestOptions();\n                _context.next = 3;\n                return this._httpClient.sendRequest(reqOptions);\n\n              case 3:\n                opRes = _context.sent;\n\n                if (!(opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"MSI: Failed to retrieve a token from \\\"\".concat(reqOptions.url, \"\\\" with an error: \").concat(opRes.bodyAsText));\n\n              case 6:\n                result = this.parseTokenResponse(opRes.bodyAsText);\n\n                if (result.tokenType) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find tokenType. Response body is: \".concat(opRes.bodyAsText));\n\n              case 11:\n                if (result.accessToken) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find accessToken. Response body is: \".concat(opRes.bodyAsText));\n\n              case 13:\n                return _context.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"prepareRequestOptions\",\n    value: function prepareRequestOptions() {\n      var endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : \"\".concat(this.msiEndpoint, \"/\");\n      var resource = encodeURIComponent(this.resource);\n      var getUrl = \"\".concat(endpoint, \"?resource=\").concat(resource, \"&api-version=\").concat(this.msiApiVersion);\n      var reqOptions = {\n        url: getUrl,\n        headers: {\n          \"secret\": this.msiSecret\n        },\n        method: \"GET\"\n      };\n      var webResource = new ms_rest_js_1.WebResource();\n      return webResource.prepare(reqOptions);\n    }\n  }]);\n\n  return MSIAppServiceTokenCredentials;\n}(msiTokenCredentials_1.MSITokenCredentials);\n\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;","map":null,"metadata":{},"sourceType":"script"}