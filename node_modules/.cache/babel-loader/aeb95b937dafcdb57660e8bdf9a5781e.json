{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n\nvar ApplicationTokenCredentialsBase = /*#__PURE__*/function (_tokenCredentialsBase) {\n  _inherits(ApplicationTokenCredentialsBase, _tokenCredentialsBase);\n\n  /**\n   * Creates a new ApplicationTokenCredentials object.\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for detailed instructions on creating an Azure Active Directory application.\n   * @constructor\n   * @param {string} clientId The active directory application client id.\n   * @param {string} domain The domain or tenant id containing this application.\n   * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n   * @param {Environment} [environment] The azure environment to authenticate with.\n   * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n   */\n  function ApplicationTokenCredentialsBase(clientId, domain, tokenAudience, environment, tokenCache) {\n    _classCallCheck(this, ApplicationTokenCredentialsBase);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ApplicationTokenCredentialsBase).call(this, clientId, domain, tokenAudience, environment, tokenCache));\n  }\n\n  _createClass(ApplicationTokenCredentialsBase, [{\n    key: \"getTokenFromCache\",\n    value: function getTokenFromCache() {\n      var _this = this;\n\n      var _super = Object.create(null, {\n        getTokenFromCache: {\n          get: function get() {\n            return _get(_getPrototypeOf(ApplicationTokenCredentialsBase.prototype), \"getTokenFromCache\", _this);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var self, tokenResponse, status, message;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this; // a thin wrapper over the base implementation. try get token from cache, additionaly clean up cache if required.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return _super.getTokenFromCache.call(this, undefined);\n\n              case 4:\n                tokenResponse = _context.sent;\n                return _context.abrupt(\"return\", Promise.resolve(tokenResponse));\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 12;\n                return self.removeInvalidItemsFromCache({\n                  _clientId: self.clientId\n                });\n\n              case 12:\n                status = _context.sent;\n\n                if (!status.result) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n              case 15:\n                message = status && status.details && status.details.message ? status.details.message : status.details;\n                return _context.abrupt(\"return\", Promise.reject(new Error(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR + \" : \" + \"critical failure while removing expired token for service principal from token cache. \" + message)));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n    }\n    /**\n     * Removes invalid items from token cache. This method is different. Here we never reject in case of error.\n     * Rather we resolve with an object that says the result is false and error information is provided in\n     * the details property of the resolved object. This is done to do better error handling in the above function\n     * where removeInvalidItemsFromCache() is called.\n     * @param {object} query The query to be used for finding the token for service principal from the cache\n     * @returns {result: boolean, details?: Error} resultObject with more info.\n     */\n\n  }, {\n    key: \"removeInvalidItemsFromCache\",\n    value: function removeInvalidItemsFromCache(query) {\n      var self = this;\n      return new Promise(function (resolve) {\n        self.tokenCache.find(query, function (error, entries) {\n          if (error) {\n            return resolve({\n              result: false,\n              details: error\n            });\n          }\n\n          if (entries && entries.length > 0) {\n            return new Promise(function (resolve) {\n              return self.tokenCache.remove(entries, function (err) {\n                if (err) {\n                  return resolve({\n                    result: false,\n                    details: err\n                  });\n                }\n\n                return resolve({\n                  result: true\n                });\n              });\n            });\n          } else {\n            return resolve({\n              result: true\n            });\n          }\n        });\n      });\n    }\n  }]);\n\n  return ApplicationTokenCredentialsBase;\n}(tokenCredentialsBase_1.TokenCredentialsBase);\n\nexports.ApplicationTokenCredentialsBase = ApplicationTokenCredentialsBase;","map":null,"metadata":{},"sourceType":"script"}