{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\n\nvar BaseRequestPolicy =\n/** @class */\nfunction () {\n  function BaseRequestPolicy(_nextPolicy, _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  BaseRequestPolicy.prototype.shouldLog = function (logLevel) {\n    return this._options.shouldLog(logLevel);\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n\n\n  BaseRequestPolicy.prototype.log = function (logLevel, message) {\n    this._options.log(logLevel, message);\n  };\n\n  return BaseRequestPolicy;\n}();\n\nexport { BaseRequestPolicy };\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\n\nvar RequestPolicyOptions =\n/** @class */\nfunction () {\n  function RequestPolicyOptions(_logger) {\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  RequestPolicyOptions.prototype.shouldLog = function (logLevel) {\n    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n\n\n  RequestPolicyOptions.prototype.log = function (logLevel, message) {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  };\n\n  return RequestPolicyOptions;\n}();\n\nexport { RequestPolicyOptions };","map":null,"metadata":{},"sourceType":"module"}