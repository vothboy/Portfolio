{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCollation = readCollation;\nexports.default = void 0;\n\nvar _collation = require(\"./collation\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nfunction readCollation(parser, callback) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, function (collationData) {\n    var lcid = (collationData[2] & 0x0F) << 16;\n    lcid |= collationData[1] << 8;\n    lcid |= collationData[0]; // This may not be extracting the correct nibbles in the correct order.\n\n    var flags = collationData[3] >> 4;\n    flags |= collationData[2] & 0xF0; // This may not be extracting the correct nibble.\n\n    var version = collationData[3] & 0x0F;\n    var sortId = collationData[4];\n    var codepage = _collation.codepageBySortId[sortId] || _collation.codepageByLcid[lcid] || 'CP1252';\n    callback({\n      lcid: lcid,\n      flags: flags,\n      version: version,\n      sortId: sortId,\n      codepage: codepage\n    });\n  });\n}\n\nfunction readSchema(parser, callback) {\n  // s2.2.5.5.3\n  parser.readUInt8(function (schemaPresent) {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar(function (dbname) {\n        parser.readBVarChar(function (owningSchema) {\n          parser.readUsVarChar(function (xmlSchemaCollection) {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\n\nfunction readUDTInfo(parser, callback) {\n  parser.readUInt16LE(function (maxByteSize) {\n    parser.readBVarChar(function (dbname) {\n      parser.readBVarChar(function (owningSchema) {\n        parser.readBVarChar(function (typeName) {\n          parser.readUsVarChar(function (assemblyName) {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction metadataParse(parser, options, callback) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, function (userType) {\n    parser.readUInt16LE(function (flags) {\n      parser.readUInt8(function (typeNumber) {\n        var type = _dataType.TYPE[typeNumber];\n\n        if (!type) {\n          return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised data type 0x%02X', typeNumber)));\n        }\n\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Variant':\n            return parser.readUInt32LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE(function (dataLength) {\n              readCollation(parser, function (collation) {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE(function (dataLength) {\n              readCollation(parser, function (collation) {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Image':\n            return parser.readUInt32LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Xml':\n            return readSchema(parser, function (schema) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8(function (scale) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8(function (dataLength) {\n              parser.readUInt8(function (precision) {\n                parser.readUInt8(function (scale) {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n\n          case 'UDT':\n            return readUDTInfo(parser, function (udtInfo) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n\n          default:\n            return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name)));\n        }\n      });\n    });\n  });\n}\n\nvar _default = metadataParse;\nexports.default = _default;\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;","map":null,"metadata":{},"sourceType":"script"}