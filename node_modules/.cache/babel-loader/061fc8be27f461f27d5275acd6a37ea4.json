{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar request = require('request');\n\nvar url = require('url');\n\nvar _ = require('underscore');\n\nvar AADConstants = require('./constants').AADConstants;\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n/**\r\n* Constructs an Authority object with a specific authority URL.\r\n* @private\r\n* @constructor\r\n* @param {string}   authorityUrl        A URL that identifies a token authority.\r\n* @param {bool}     validateAuthority   Indicates whether the Authority url should be validated as an actual AAD\r\n*                                       authority.  The default is true.\r\n*/\n\n\nfunction Authority(authorityUrl, validateAuthority) {\n  this._log = null;\n  this._url = url.parse(authorityUrl);\n\n  this._validateAuthorityUrl();\n\n  this._validated = !validateAuthority;\n  this._host = null;\n  this._tenant = null;\n\n  this._parseAuthority();\n\n  this._authorizationEndpoint = null;\n  this._tokenEndpoint = null;\n  this._deviceCodeEndpoint = null;\n  this._isAdfsAuthority = this._tenant.toLowerCase() === \"adfs\";\n}\n/**\r\n * The URL of the authority\r\n * @instance\r\n * @type {string}\r\n * @memberOf Authority\r\n * @name url\r\n */\n\n\nObject.defineProperty(Authority.prototype, 'url', {\n  get: function get() {\n    return url.format(this._url);\n  }\n});\n/**\r\n * The token endpoint that the authority uses as discovered by instance discovery.\r\n * @instance\r\n * @type {string}\r\n * @memberOf Authority\r\n * @name tokenEndpoint\r\n */\n\nObject.defineProperty(Authority.prototype, 'tokenEndpoint', {\n  get: function get() {\n    return this._tokenEndpoint;\n  }\n});\nObject.defineProperty(Authority.prototype, 'deviceCodeEndpoint', {\n  get: function get() {\n    return this._deviceCodeEndpoint;\n  }\n});\n/**\r\n * Checks the authority url to ensure that it meets basic requirements such as being over SSL.  If it does not then\r\n * this method will throw if any of the checks fail.\r\n * @private\r\n * @throws {Error} If the authority url fails to pass any validation checks.\r\n */\n\nAuthority.prototype._validateAuthorityUrl = function () {\n  if (this._url.protocol !== 'https:') {\n    throw new Error('The authority url must be an https endpoint.');\n  }\n\n  if (this._url.query) {\n    throw new Error('The authority url must not have a query string.');\n  }\n};\n/**\r\n * Parse the authority to get the tenant name.  The rest of the\r\n * URL is thrown away in favor of one of the endpoints from the validation doc.\r\n * @private\r\n */\n\n\nAuthority.prototype._parseAuthority = function () {\n  this._host = this._url.host;\n\n  var pathParts = this._url.pathname.split('/');\n\n  this._tenant = pathParts[1];\n\n  if (!this._tenant) {\n    throw new Error('Could not determine tenant.');\n  }\n};\n/**\r\n * Performs instance discovery based on a simple match against well known authorities.\r\n * @private\r\n * @return {bool}  Returns true if the authority is recognized.\r\n */\n\n\nAuthority.prototype._performStaticInstanceDiscovery = function () {\n  this._log.verbose('Performing static instance discovery');\n\n  var hostIndex = _.indexOf(AADConstants.WELL_KNOWN_AUTHORITY_HOSTS, this._url.hostname);\n\n  var found = hostIndex > -1;\n\n  if (found) {\n    this._log.verbose('Authority validated via static instance discovery.');\n  }\n\n  return found;\n};\n\nAuthority.prototype._createAuthorityUrl = function () {\n  return 'https://' + this._url.host + '/' + encodeURIComponent(this._tenant) + AADConstants.AUTHORIZE_ENDPOINT_PATH;\n};\n/**\r\n * Creates an instance discovery endpoint url for the specific authority that this object represents.\r\n * @private\r\n * @param  {string} authorityHost The host name of a well known authority.\r\n * @return {URL}    The constructed endpoint url.\r\n */\n\n\nAuthority.prototype._createInstanceDiscoveryEndpointFromTemplate = function (authorityHost) {\n  var discoveryEndpoint = AADConstants.INSTANCE_DISCOVERY_ENDPOINT_TEMPLATE;\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_host}', authorityHost);\n  discoveryEndpoint = discoveryEndpoint.replace('{authorize_endpoint}', encodeURIComponent(this._createAuthorityUrl()));\n  return url.parse(discoveryEndpoint);\n};\n/**\r\n * Performs instance discovery via a network call to well known authorities.\r\n * @private\r\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.  If succesful,\r\n *                                                            this function calls the callback with the\r\n *                                                            tenantDiscoveryEndpoint returned by the\r\n *                                                            server.\r\n */\n\n\nAuthority.prototype._performDynamicInstanceDiscovery = function (callback) {\n  try {\n    var self = this;\n\n    var discoveryEndpoint = this._createInstanceDiscoveryEndpointFromTemplate(AADConstants.WORLD_WIDE_AUTHORITY);\n\n    var getOptions = util.createRequestOptions(self);\n\n    this._log.verbose('Attempting instance discover');\n\n    this._log.verbose('Attempting instance discover at: ' + url.format(discoveryEndpoint), true);\n\n    request.get(discoveryEndpoint, getOptions, util.createRequestHandler('Instance Discovery', this._log, callback, function (response, body) {\n      var discoveryResponse = JSON.parse(body);\n\n      if (discoveryResponse['tenant_discovery_endpoint']) {\n        callback(null, discoveryResponse['tenant_discovery_endpoint']);\n      } else {\n        callback(self._log.createError('Failed to parse instance discovery response'));\n      }\n    }));\n  } catch (e) {\n    callback(e);\n  }\n};\n/**\r\n * @callback InstanceDiscoveryCallback\r\n * @private\r\n * @memberOf Authority\r\n * @param {Error} err If an error occurs during instance discovery then it will be returned here.\r\n * @param {string} tenantDiscoveryEndpoint If instance discovery is successful then this will contain the\r\n *                                         tenantDiscoveryEndpoint associated with the authority.\r\n */\n\n/**\r\n * Determines whether the authority is recognized as a trusted AAD authority.\r\n * @private\r\n * @param {Authority.InstanceDiscoveryCallback}   callback    The callback function.\r\n */\n\n\nAuthority.prototype._validateViaInstanceDiscovery = function (callback) {\n  if (this._performStaticInstanceDiscovery()) {\n    callback();\n  } else {\n    this._performDynamicInstanceDiscovery(callback);\n  }\n};\n/**\r\n * @callback GetOauthEndpointsCallback\r\n * @private\r\n * @memberOf Authority\r\n * @param {Error} error An error if one occurred.\r\n */\n\n/**\r\n * Given a tenant discovery endpoint this method will attempt to discover the token endpoint.  If the\r\n * tenant discovery endpoint is unreachable for some reason then it will fall back to a algorithmic generation of the\r\n * token endpoint url.\r\n * @private\r\n * @param {string}           tenantDiscoveryEndpoint   The url of the tenant discovery endpoint for this authority.\r\n * @param {Authority.GetOauthEndpointsCallback}  callback  The callback function.\r\n */\n\n\nAuthority.prototype._getOAuthEndpoints = function (tenantDiscoveryEndpoint, callback) {\n  if (this._tokenEndpoint && this._deviceCodeEndpoint) {\n    callback();\n    return;\n  } else {\n    // fallback to the well known token endpoint path.\n    if (!this._tokenEndpoint) {\n      this._tokenEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.TOKEN_ENDPOINT_PATH;\n    }\n\n    if (!this._deviceCodeEndpoint) {\n      this._deviceCodeEndpoint = url.format('https://' + this._url.host + '/' + encodeURIComponent(this._tenant)) + AADConstants.DEVICE_ENDPOINT_PATH;\n    }\n\n    callback();\n    return;\n  }\n};\n/**\r\n * @callback ValidateCallback\r\n * @memberOf Authority\r\n */\n\n/**\r\n * Perform validation on the authority represented by this object.  In addition to simple validation\r\n * the oauth token endpoint will be retrieved.\r\n * @param {Authority.ValidateCallback}   callback   The callback function.\r\n */\n\n\nAuthority.prototype.validate = function (callContext, callback) {\n  this._log = new Logger('Authority', callContext._logContext);\n  this._callContext = callContext;\n  var self = this;\n\n  if (!this._validated) {\n    this._log.verbose('Performing instance discovery');\n\n    this._log.verbose('Performing instance discovery: ' + url.format(this._url), true);\n\n    this._validateViaInstanceDiscovery(function (err, tenantDiscoveryEndpoint) {\n      if (err) {\n        callback(err);\n      } else {\n        self._validated = true;\n\n        self._getOAuthEndpoints(tenantDiscoveryEndpoint, callback);\n\n        return;\n      }\n    });\n  } else {\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off');\n\n    this._log.verbose('Instance discovery/validation has either already been completed or is turned off: ' + url.format(this._url), true);\n\n    this._getOAuthEndpoints(null, callback);\n\n    return;\n  }\n};\n\nmodule.exports.Authority = Authority;","map":null,"metadata":{},"sourceType":"script"}