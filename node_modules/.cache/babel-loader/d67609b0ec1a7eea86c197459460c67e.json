{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction readNewAndOldValue(parser, length, type, callback) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      return parser.readBVarChar(function (newValue) {\n        parser.readBVarChar(function (oldValue) {\n          switch (type.name) {\n            case 'PACKET_SIZE':\n              return callback(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)));\n\n            case 'DATABASE':\n              return callback(new _token.DatabaseEnvChangeToken(newValue, oldValue));\n\n            case 'LANGUAGE':\n              return callback(new _token.LanguageEnvChangeToken(newValue, oldValue));\n\n            case 'CHARSET':\n              return callback(new _token.CharsetEnvChangeToken(newValue, oldValue));\n\n            case 'DATABASE_MIRRORING_PARTNER':\n              return callback(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      return parser.readBVarByte(function (newValue) {\n        parser.readBVarByte(function (oldValue) {\n          switch (type.name) {\n            case 'SQL_COLLATION':\n              return callback(new _token.CollationChangeToken(newValue, oldValue));\n\n            case 'BEGIN_TXN':\n              return callback(new _token.BeginTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'COMMIT_TXN':\n              return callback(new _token.CommitTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'ROLLBACK_TXN':\n              return callback(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'RESET_CONNECTION':\n              return callback(new _token.ResetConnectionEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'ROUTING_CHANGE':\n      return parser.readUInt16LE(function (valueLength) {\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        parser.readBuffer(valueLength, function (routePacket) {\n          var protocol = routePacket.readUInt8(0);\n\n          if (protocol !== 0) {\n            return parser.emit('error', new Error('Unknown protocol byte in routing change event'));\n          }\n\n          var port = routePacket.readUInt16LE(1);\n          var serverLen = routePacket.readUInt16LE(3); // 2 bytes per char, starting at offset 5\n\n          var server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n          var newValue = {\n            protocol: protocol,\n            port: port,\n            server: server\n          };\n          parser.readUInt16LE(function (oldValueLength) {\n            parser.readBuffer(oldValueLength, function (oldValue) {\n              callback(new _token.RoutingEnvChangeToken(newValue, oldValue));\n            });\n          });\n        });\n      });\n\n    default:\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name); // skip unknown bytes\n\n      parser.readBuffer(length - 1, function () {\n        callback(undefined);\n      });\n  }\n}\n\nfunction envChangeParser(parser, _colMetadata, _options, callback) {\n  parser.readUInt16LE(function (length) {\n    parser.readUInt8(function (typeNumber) {\n      var type = types[typeNumber];\n\n      if (!type) {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber); // skip unknown bytes\n\n        return parser.readBuffer(length - 1, function () {\n          callback(undefined);\n        });\n      }\n\n      readNewAndOldValue(parser, length, type, function (token) {\n        callback(token);\n      });\n    });\n  });\n}\n\nvar _default = envChangeParser;\nexports.default = _default;\nmodule.exports = envChangeParser;","map":null,"metadata":{},"sourceType":"script"}