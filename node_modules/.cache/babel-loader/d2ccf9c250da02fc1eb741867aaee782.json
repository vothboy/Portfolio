{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BigInt = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function declaration() {\n    return 'bigint';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_intn.default.id);\n    buffer.writeUInt8(8);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt8(8);\n      buffer.writeInt64LE(Number(parameter.value));\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < Number.MIN_SAFE_INTEGER || value > Number.MAX_SAFE_INTEGER) {\n      return new TypeError(\"Value must be between \".concat(Number.MIN_SAFE_INTEGER, \" and \").concat(Number.MAX_SAFE_INTEGER, \", inclusive.  For smaller or bigger numbers, use VarChar type.\"));\n    }\n\n    return value;\n  }\n};\nvar _default = BigInt;\nexports.default = _default;\nmodule.exports = BigInt;","map":null,"metadata":{},"sourceType":"script"}