{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar tds = require('tedious');\n\nvar debug = require('debug')('mssql:tedi');\n\nvar BaseConnectionPool = require('../base/connection-pool');\n\nvar _require = require('../utils'),\n    IDS = _require.IDS;\n\nvar shared = require('../shared');\n\nvar ConnectionError = require('../error/connection-error');\n\nvar ConnectionPool = /*#__PURE__*/function (_BaseConnectionPool) {\n  _inherits(ConnectionPool, _BaseConnectionPool);\n\n  function ConnectionPool() {\n    _classCallCheck(this, ConnectionPool);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPool).apply(this, arguments));\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"_poolCreate\",\n    value: function _poolCreate() {\n      var _this = this;\n\n      return new shared.Promise(function (resolve, reject) {\n        var resolveOnce = function resolveOnce(v) {\n          resolve(v);\n\n          resolve = reject = function reject() {};\n        };\n\n        var rejectOnce = function rejectOnce(e) {\n          reject(e);\n\n          resolve = reject = function reject() {};\n        };\n\n        var cfg = {\n          server: _this.config.server,\n          options: Object.assign({\n            encrypt: typeof _this.config.encrypt === 'boolean' ? _this.config.encrypt : true\n          }, _this.config.options),\n          authentication: Object.assign({\n            type: _this.config.domain !== undefined ? 'ntlm' : 'default',\n            options: {\n              userName: _this.config.user,\n              password: _this.config.password,\n              domain: _this.config.domain\n            }\n          }, _this.config.authentication)\n        };\n        cfg.options.database = _this.config.database;\n        cfg.options.port = _this.config.port;\n        cfg.options.connectTimeout = _this.config.connectionTimeout || _this.config.timeout || 15000;\n        cfg.options.requestTimeout = _this.config.requestTimeout != null ? _this.config.requestTimeout : 15000;\n        cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4';\n        cfg.options.rowCollectionOnDone = false;\n        cfg.options.rowCollectionOnRequestCompletion = false;\n        cfg.options.useColumnNames = false;\n        cfg.options.appName = cfg.options.appName || 'node-mssql'; // tedious always connect via tcp when port is specified\n\n        if (cfg.options.instanceName) delete cfg.options.port;\n        if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n        if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n        if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n        if (_this.config.debug) {\n          cfg.options.debug = {\n            packet: true,\n            token: true,\n            data: true,\n            payload: true\n          };\n        }\n\n        var tedious = new tds.Connection(cfg);\n        IDS.add(tedious, 'Connection');\n        debug('pool(%d): connection #%d created', IDS.get(_this), IDS.get(tedious));\n        debug('connection(%d): establishing', IDS.get(tedious));\n        tedious.once('connect', function (err) {\n          if (err) {\n            err = new ConnectionError(err);\n            return rejectOnce(err);\n          }\n\n          debug('connection(%d): established', IDS.get(tedious));\n          resolveOnce(tedious);\n        });\n        tedious.on('end', function () {\n          var err = new ConnectionError('The connection ended without ever completing the connection');\n          rejectOnce(err);\n        });\n        tedious.on('error', function (err) {\n          if (err.code === 'ESOCKET') {\n            tedious.hasError = true;\n          } else {\n            _this.emit('error', err);\n          }\n\n          rejectOnce(err);\n        });\n\n        if (_this.config.debug) {\n          tedious.on('debug', _this.emit.bind(_this, 'debug', tedious));\n        }\n\n        if (typeof _this.config.beforeConnect === 'function') {\n          _this.config.beforeConnect(tedious);\n        }\n      });\n    }\n  }, {\n    key: \"_poolValidate\",\n    value: function _poolValidate(tedious) {\n      return tedious && !tedious.closed && !tedious.hasError;\n    }\n  }, {\n    key: \"_poolDestroy\",\n    value: function _poolDestroy(tedious) {\n      return new shared.Promise(function (resolve, reject) {\n        if (!tedious) {\n          resolve();\n          return;\n        }\n\n        debug('connection(%d): destroying', IDS.get(tedious));\n\n        if (tedious.closed) {\n          debug('connection(%d): already closed', IDS.get(tedious));\n          resolve();\n        } else {\n          tedious.once('end', function () {\n            debug('connection(%d): destroyed', IDS.get(tedious));\n            resolve();\n          });\n          tedious.close();\n        }\n      });\n    }\n  }]);\n\n  return ConnectionPool;\n}(BaseConnectionPool);\n\nmodule.exports = ConnectionPool;","map":null,"metadata":{},"sourceType":"script"}