{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\nvar DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\nvar BulkLoad = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(BulkLoad, _events$EventEmitter);\n\n  function BulkLoad(table, connectionOptions, _ref, callback) {\n    var _this;\n\n    var _ref$checkConstraints = _ref.checkConstraints,\n        checkConstraints = _ref$checkConstraints === void 0 ? false : _ref$checkConstraints,\n        _ref$fireTriggers = _ref.fireTriggers,\n        fireTriggers = _ref$fireTriggers === void 0 ? false : _ref$fireTriggers,\n        _ref$keepNulls = _ref.keepNulls,\n        keepNulls = _ref$keepNulls === void 0 ? false : _ref$keepNulls,\n        _ref$lockTable = _ref.lockTable,\n        lockTable = _ref$lockTable === void 0 ? false : _ref$lockTable;\n\n    _classCallCheck(this, BulkLoad);\n\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BulkLoad).call(this));\n    _this.error = void 0;\n    _this.canceled = void 0;\n    _this.executionStarted = void 0;\n    _this.streamingMode = void 0;\n    _this.table = void 0;\n    _this.connection = void 0;\n    _this.timeout = void 0;\n    _this.rows = void 0;\n    _this.rst = void 0;\n    _this.rowCount = void 0;\n    _this.paused = void 0;\n    _this.options = void 0;\n    _this.callback = void 0;\n    _this.columns = void 0;\n    _this.columnsByName = void 0;\n    _this.firstRowWritten = void 0;\n    _this.rowToPacketTransform = void 0;\n    _this.bulkOptions = void 0;\n    _this.error = undefined;\n    _this.canceled = false;\n    _this.executionStarted = false;\n    _this.table = table;\n    _this.options = connectionOptions;\n    _this.callback = callback;\n    _this.columns = [];\n    _this.columnsByName = {};\n    _this.firstRowWritten = false;\n    _this.streamingMode = false;\n    _this.rowToPacketTransform = new RowTransform(_assertThisInitialized(_assertThisInitialized(_this))); // eslint-disable-line no-use-before-define\n\n    _this.bulkOptions = {\n      checkConstraints: checkConstraints,\n      fireTriggers: fireTriggers,\n      keepNulls: keepNulls,\n      lockTable: lockTable\n    };\n    return _this;\n  }\n\n  _createClass(BulkLoad, [{\n    key: \"addColumn\",\n    value: function addColumn(name, type, _ref2) {\n      var _ref2$output = _ref2.output,\n          output = _ref2$output === void 0 ? false : _ref2$output,\n          length = _ref2.length,\n          precision = _ref2.precision,\n          scale = _ref2.scale,\n          _ref2$objName = _ref2.objName,\n          objName = _ref2$objName === void 0 ? name : _ref2$objName,\n          _ref2$nullable = _ref2.nullable,\n          nullable = _ref2$nullable === void 0 ? true : _ref2$nullable;\n\n      if (this.firstRowWritten) {\n        throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('Columns cannot be added to bulk insert after execution has started.');\n      }\n\n      var column = {\n        type: type,\n        name: name,\n        value: null,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale,\n        objName: objName,\n        nullable: nullable\n      };\n\n      if ((type.id & 0x30) === 0x20) {\n        if (column.length == null && type.resolveLength) {\n          column.length = type.resolveLength(column);\n        }\n      }\n\n      if (type.resolvePrecision && column.precision == null) {\n        column.precision = type.resolvePrecision(column);\n      }\n\n      if (type.resolveScale && column.scale == null) {\n        column.scale = type.resolveScale(column);\n      }\n\n      this.columns.push(column);\n      this.columnsByName[name] = column;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      this.firstRowWritten = true;\n      var row;\n\n      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n        input[_key] = arguments[_key];\n      }\n\n      if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n        row = input;\n      } else {\n        row = input[0];\n      } // write each column\n\n\n      if (Array.isArray(row)) {\n        this.rowToPacketTransform.write(row);\n      } else {\n        var object = row;\n        this.rowToPacketTransform.write(this.columns.map(function (column) {\n          return object[column.objName];\n        }));\n      }\n    }\n  }, {\n    key: \"getOptionsSql\",\n    value: function getOptionsSql() {\n      var addOptions = [];\n\n      if (this.bulkOptions.checkConstraints) {\n        addOptions.push('CHECK_CONSTRAINTS');\n      }\n\n      if (this.bulkOptions.fireTriggers) {\n        addOptions.push('FIRE_TRIGGERS');\n      }\n\n      if (this.bulkOptions.keepNulls) {\n        addOptions.push('KEEP_NULLS');\n      }\n\n      if (this.bulkOptions.lockTable) {\n        addOptions.push('TABLOCK');\n      }\n\n      if (addOptions.length > 0) {\n        return \" WITH (\".concat(addOptions.join(','), \")\");\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"getBulkInsertSql\",\n    value: function getBulkInsertSql() {\n      var sql = 'insert bulk ' + this.table + '(';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ', ';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n      }\n\n      sql += ')';\n      sql += this.getOptionsSql();\n      return sql;\n    }\n  }, {\n    key: \"getTableCreationSql\",\n    value: function getTableCreationSql() {\n      var sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ',\\n';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n        if (c.nullable !== undefined) {\n          sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n        }\n      }\n\n      sql += '\\n)';\n      return sql;\n    }\n  }, {\n    key: \"getColMetaData\",\n    value: function getColMetaData() {\n      var tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n      tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n      tBuf.writeUInt16LE(this.columns.length);\n\n      for (var j = 0, len = this.columns.length; j < len; j++) {\n        var c = this.columns[j]; // UserType\n\n        if (this.options.tdsVersion < '7_2') {\n          tBuf.writeUInt16LE(0);\n        } else {\n          tBuf.writeUInt32LE(0);\n        } // Flags\n\n\n        var flags = FLAGS.updateableReadWrite;\n\n        if (c.nullable) {\n          flags |= FLAGS.nullable;\n        } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n          flags |= FLAGS.nullableUnknown;\n        }\n\n        tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n        c.type.writeTypeInfo(tBuf, c, this.options); // ColName\n\n        tBuf.writeBVarchar(c.name, 'ucs2');\n      }\n\n      return tBuf.data;\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }, {\n    key: \"createDoneToken\",\n    value: function createDoneToken() {\n      // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n      var tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n      tBuf.writeUInt8(_token.TYPE.DONE);\n      var status = DONE_STATUS.FINAL;\n      tBuf.writeUInt16LE(status);\n      tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n      tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n      if (this.options.tdsVersion >= '7_2') {\n        tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n      }\n\n      return tBuf.data;\n    } // This method switches the BulkLoad object into streaming mode and returns\n    // a stream.Writable for streaming rows to the server.\n\n  }, {\n    key: \"getRowStream\",\n    value: function getRowStream() {\n      if (this.firstRowWritten) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n      }\n\n      this.streamingMode = true;\n      return this.rowToPacketTransform;\n    }\n  }, {\n    key: \"getMessageStream\",\n    value: function getMessageStream() {\n      var _this2 = this;\n\n      var message = new _message.default({\n        type: _packet.TYPE.BULK_LOAD\n      });\n      this.rowToPacketTransform.pipe(message);\n      this.rowToPacketTransform.once('finish', function () {\n        _this2.removeListener('cancel', onCancel);\n      });\n\n      var onCancel = function onCancel() {\n        _this2.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n\n        _this2.rowToPacketTransform.destroy();\n      };\n\n      this.once('cancel', onCancel);\n      return message;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n  }]);\n\n  return BulkLoad;\n}(_events.EventEmitter);\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad; // A transform that converts rows to packets.\n\nvar RowTransform = /*#__PURE__*/function (_readableStream$Trans) {\n  _inherits(RowTransform, _readableStream$Trans);\n\n  function RowTransform(bulkLoad) {\n    var _this3;\n\n    _classCallCheck(this, RowTransform);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(RowTransform).call(this, {\n      writableObjectMode: true\n    }));\n    _this3.columnMetadataWritten = void 0;\n    _this3.bulkLoad = void 0;\n    _this3.mainOptions = void 0;\n    _this3.columns = void 0;\n    _this3.bulkLoad = bulkLoad;\n    _this3.mainOptions = bulkLoad.options;\n    _this3.columns = bulkLoad.columns;\n    _this3.columnMetadataWritten = false;\n    return _this3;\n  }\n\n  _createClass(RowTransform, [{\n    key: \"_transform\",\n    value: function _transform(row, _encoding, callback) {\n      if (!this.columnMetadataWritten) {\n        this.push(this.bulkLoad.getColMetaData());\n        this.columnMetadataWritten = true;\n      }\n\n      var buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n      buf.writeUInt8(_token.TYPE.ROW);\n\n      for (var i = 0; i < this.columns.length; i++) {\n        var c = this.columns[i];\n        c.type.writeParameterData(buf, {\n          length: c.length,\n          scale: c.scale,\n          precision: c.precision,\n          value: row[i]\n        }, this.mainOptions, function () {});\n      }\n\n      this.push(buf.data);\n      process.nextTick(callback);\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      this.push(this.bulkLoad.createDoneToken());\n      process.nextTick(callback);\n    }\n  }]);\n\n  return RowTransform;\n}(_readableStream.Transform);","map":null,"metadata":{},"sourceType":"script"}