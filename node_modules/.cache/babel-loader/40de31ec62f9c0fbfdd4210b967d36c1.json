{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nexport var ADD_TO_CART = function ADD_TO_CART() {\n  var qty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var ProductID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var Name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var Price = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return {\n    type: \"ADD_TO_CART\",\n    payload: {\n      qty: qty,\n      ProductID: ProductID,\n      Name: Name,\n      Price: Price\n    }\n  };\n};\nexport var COOKBOOK_LOAD_ITEMS = function COOKBOOK_LOAD_ITEMS() {\n  return {\n    type: \"COOKBOOK_LOAD_ITEMS\"\n  };\n}; // Based on what i know, i think this page is where i need to get the values qty productId name price to then send to the page\n\n/* $results = DB::table('orderitem')\r\n->join('product', 'product.ProductID', 'orderitem.ProductID')\r\n->join('ordercart', 'ordercart.OrdercartID', 'orderitem.OrdercartID')\r\n->select( 'product.Name', 'product.Price', 'orderitem.Qty', 'orderitem.OrderItemID', 'product.ProductID')\r\n->where('ordercart.UniqueIdentifier', '=', $request->session()->get('Unique-Identifier'))\r\n->get(); */\n//table needs to be an inner join so whats with that\n\nexport var CART_LOAD_PAGE = function CART_LOAD_PAGE() {\n  var getItemsInCart = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var itemsInCart, a;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              itemsInCart = axios.get(\"http://localhost:5000/api/cart/list\");\n              _context.next = 3;\n              return itemsInCart;\n\n            case 3:\n              a = _context.sent;\n              console.log(\"This is line 26 in the Actions page: \", a.data);\n              return _context.abrupt(\"return\", a.data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getItemsInCart() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    type: \"CART_LOAD_PAGE\",\n    payload: getItemsInCart()\n  };\n};","map":{"version":3,"sources":["C:/Users/vothb/Desktop/School/Quarter_5/CIS259/Plankcooking-microservices/Plankcooking/client/src/redux/actions/index.js"],"names":["axios","ADD_TO_CART","qty","ProductID","Name","Price","type","payload","COOKBOOK_LOAD_ITEMS","CART_LOAD_PAGE","getItemsInCart","itemsInCart","get","a","console","log","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkD;AAAA,MAAjDC,GAAiD,uEAA3C,CAA2C;AAAA,MAAxCC,SAAwC,uEAA5B,CAA4B;AAAA,MAAzBC,IAAyB,uEAAlB,EAAkB;AAAA,MAAdC,KAAc,uEAAN,CAAM;AAC3E,SAAO;AACLC,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAE;AAAEL,MAAAA,GAAG,EAAHA,GAAF;AAAOC,MAAAA,SAAS,EAATA,SAAP;AAAkBC,MAAAA,IAAI,EAAJA,IAAlB;AAAwBC,MAAAA,KAAK,EAALA;AAAxB;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,SAAO;AACLF,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,MAAMC,cAAc;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,WADe,GACDX,KAAK,CAACY,GAAN,CAAU,qCAAV,CADC;AAAA;AAAA,qBAELD,WAFK;;AAAA;AAEfE,cAAAA,CAFe;AAGrBC,cAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDF,CAAC,CAACG,IAAvD;AAHqB,+CAIdH,CAAC,CAACG,IAJY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdN,cAAc;AAAA;AAAA;AAAA,KAApB;;AAOA,SAAO;AACLJ,IAAAA,IAAI,EAAE,gBADD;AAELC,IAAAA,OAAO,EAAEG,cAAc;AAFlB,GAAP;AAID,CAZM","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const ADD_TO_CART = (qty = 1, ProductID = 2, Name = \"\", Price = 0) => {\r\n  return {\r\n    type: \"ADD_TO_CART\",\r\n    payload: { qty, ProductID, Name, Price },\r\n  };\r\n};\r\n\r\nexport const COOKBOOK_LOAD_ITEMS = () => {\r\n  return {\r\n    type: \"COOKBOOK_LOAD_ITEMS\",\r\n  };\r\n};\r\n// Based on what i know, i think this page is where i need to get the values qty productId name price to then send to the page\r\n/* $results = DB::table('orderitem')\r\n->join('product', 'product.ProductID', 'orderitem.ProductID')\r\n->join('ordercart', 'ordercart.OrdercartID', 'orderitem.OrdercartID')\r\n->select( 'product.Name', 'product.Price', 'orderitem.Qty', 'orderitem.OrderItemID', 'product.ProductID')\r\n->where('ordercart.UniqueIdentifier', '=', $request->session()->get('Unique-Identifier'))\r\n->get(); */\r\n//table needs to be an inner join so whats with that\r\nexport const CART_LOAD_PAGE = () => {\r\n  const getItemsInCart = async () => {\r\n    const itemsInCart = axios.get(\"http://localhost:5000/api/cart/list\");\r\n    const a = await itemsInCart;\r\n    console.log(\"This is line 26 in the Actions page: \", a.data);\r\n    return a.data;\r\n  };\r\n\r\n  return {\r\n    type: \"CART_LOAD_PAGE\",\r\n    payload: getItemsInCart(),\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}