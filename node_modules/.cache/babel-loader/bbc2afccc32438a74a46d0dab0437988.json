{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n/**\n * A credentials object that uses a token string and a authorzation scheme to authenticate.\n */\n\nvar TokenCredentials =\n/** @class */\nfunction () {\n  /**\n   * Creates a new TokenCredentials object.\n   *\n   * @constructor\n   * @param {string} token The token.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  function TokenCredentials(token, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n\n    if (!token) {\n      throw new Error(\"token cannot be null or undefined.\");\n    }\n\n    this.token = token;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @return {Promise<WebResource>} The signed request object.\n   */\n\n\n  TokenCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, this.authorizationScheme + \" \" + this.token);\n    return Promise.resolve(webResource);\n  };\n\n  return TokenCredentials;\n}();\n\nexport { TokenCredentials };","map":null,"metadata":{},"sourceType":"module"}