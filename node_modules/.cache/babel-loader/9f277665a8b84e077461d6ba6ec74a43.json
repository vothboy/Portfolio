{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n\nvar DeviceTokenCredentials = /*#__PURE__*/function (_tokenCredentialsBase) {\n  _inherits(DeviceTokenCredentials, _tokenCredentialsBase);\n\n  /**\n   * Creates a new DeviceTokenCredentials object that gets a new access token using userCodeInfo (contains user_code, device_code)\n   * for authenticating user on device.\n   *\n   * When this credential is used, the script will provide a url and code. The user needs to copy the url and the code, paste it\n   * in a browser and authenticate over there. If successful, the script will get the access token.\n   *\n   * @constructor\n   * @param {string} [clientId] The active directory application client id.\n   * @param {string} [domain] The domain or tenant id containing this application. Default value is \"common\"\n   * @param {string} [username] The user name for account in the form: \"user@example.com\".\n   * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for an example.\n   * @param {Environment} [environment] The azure environment to authenticate with. Default environment is \"Azure\" popularly known as \"Public Azure Cloud\".\n   * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n   */\n  function DeviceTokenCredentials(clientId, domain, username, tokenAudience, environment, tokenCache) {\n    var _this;\n\n    _classCallCheck(this, DeviceTokenCredentials);\n\n    if (!username) {\n      username = \"user@example.com\";\n    }\n\n    if (!domain) {\n      domain = authConstants_1.AuthConstants.AAD_COMMON_TENANT;\n    }\n\n    if (!clientId) {\n      clientId = authConstants_1.AuthConstants.DEFAULT_ADAL_CLIENT_ID;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeviceTokenCredentials).call(this, clientId, domain, tokenAudience, environment, tokenCache));\n    _this.username = username;\n    return _this;\n  }\n\n  _createClass(DeviceTokenCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      // For device auth, this is just getTokenFromCache.\n      return this.getTokenFromCache(this.username);\n    }\n  }]);\n\n  return DeviceTokenCredentials;\n}(tokenCredentialsBase_1.TokenCredentialsBase);\n\nexports.DeviceTokenCredentials = DeviceTokenCredentials;","map":null,"metadata":{},"sourceType":"script"}