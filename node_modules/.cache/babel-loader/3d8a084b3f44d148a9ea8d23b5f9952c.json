{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar applicationTokenCredentials_1 = require(\"./applicationTokenCredentials\");\n\nvar applicationTokenCertificateCredentials_1 = require(\"./applicationTokenCertificateCredentials\");\n\nvar deviceTokenCredentials_1 = require(\"./deviceTokenCredentials\");\n\nvar msiAppServiceTokenCredentials_1 = require(\"./msiAppServiceTokenCredentials\");\n\nvar msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nvar msiVmTokenCredentials_1 = require(\"./msiVmTokenCredentials\");\n\nvar tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\n\nvar userTokenCredentials_1 = require(\"./userTokenCredentials\");\n\nvar adal_node_1 = require(\"adal-node\");\n\nfunction createAuthenticator(credentials) {\n  var convertedCredentials = _convert(credentials);\n\n  var authenticator = _createAuthenticatorMapper(convertedCredentials);\n\n  return authenticator;\n}\n\nexports.createAuthenticator = createAuthenticator;\n\nfunction _convert(credentials) {\n  if (credentials instanceof msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials) {\n    return new msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials({\n      msiEndpoint: credentials.msiEndpoint,\n      msiSecret: credentials.msiSecret,\n      msiApiVersion: credentials.msiApiVersion,\n      resource: credentials.resource\n    });\n  } else if (credentials instanceof msiVmTokenCredentials_1.MSIVmTokenCredentials) {\n    return new msiVmTokenCredentials_1.MSIVmTokenCredentials({\n      resource: credentials.resource,\n      msiEndpoint: credentials.msiEndpoint\n    });\n  } else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\n    throw new Error(\"MSI-credentials not one of: MSIVmTokenCredentials, MSIAppServiceTokenCredentials\");\n  } else {\n    return credentials;\n  }\n}\n\nfunction _createAuthenticatorMapper(credentials) {\n  return function (challenge) {\n    return new Promise(function (resolve, reject) {\n      // Function to take token Response and format a authorization value\n      var _formAuthorizationValue = function _formAuthorizationValue(err, tokenResponse) {\n        if (err) {\n          return reject(err);\n        }\n\n        if (tokenResponse.error) {\n          return reject(tokenResponse.error);\n        }\n\n        tokenResponse = tokenResponse; // Calculate the value to be set in the request's Authorization header and resume the call.\n\n        var authorizationValue = tokenResponse.tokenType + \" \" + tokenResponse.accessToken;\n        return resolve(authorizationValue);\n      }; // Create a new authentication context.\n\n\n      if (credentials instanceof tokenCredentialsBase_1.TokenCredentialsBase) {\n        var context = new adal_node_1.AuthenticationContext(challenge.authorization, true, credentials.authContext && credentials.authContext.cache);\n\n        if (credentials instanceof applicationTokenCredentials_1.ApplicationTokenCredentials) {\n          return context.acquireTokenWithClientCredentials(challenge.resource, credentials.clientId, credentials.secret, _formAuthorizationValue);\n        } else if (credentials instanceof applicationTokenCertificateCredentials_1.ApplicationTokenCertificateCredentials) {\n          return context.acquireTokenWithClientCertificate(challenge.resource, credentials.clientId, credentials.certificate, credentials.thumbprint, _formAuthorizationValue);\n        } else if (credentials instanceof userTokenCredentials_1.UserTokenCredentials) {\n          return context.acquireTokenWithUsernamePassword(challenge.resource, credentials.username, credentials.password, credentials.clientId, _formAuthorizationValue);\n        } else if (credentials instanceof deviceTokenCredentials_1.DeviceTokenCredentials) {\n          return context.acquireToken(challenge.resource, credentials.username, credentials.clientId, _formAuthorizationValue);\n        }\n      } else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\n        return credentials.getToken();\n      } else {\n        return reject(new Error(\"credentials must be one of: ApplicationTokenCredentials, UserTokenCredentials, \" + \"DeviceTokenCredentials, MSITokenCredentials\"));\n      }\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}