{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EPOCH_DATE = new Date(1900, 0, 1);\nvar UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nvar DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function declaration() {\n    return 'datetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_datetimen.default.id);\n    buffer.writeUInt8(8);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      var days, dstDiff, milliseconds, seconds, threeHundredthsOfSecond;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getUTCHours() * 60 * 60;\n        seconds += parameter.value.getUTCMinutes() * 60;\n        seconds += parameter.value.getUTCSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getUTCMilliseconds();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getHours() * 60 * 60;\n        seconds += parameter.value.getMinutes() * 60;\n        seconds += parameter.value.getSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getMilliseconds();\n      }\n\n      threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n      threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n      if (threeHundredthsOfSecond === 25920000) {\n        days += 1;\n        threeHundredthsOfSecond = 0;\n      }\n\n      buffer.writeUInt8(8);\n      buffer.writeInt32LE(days);\n      buffer.writeUInt32LE(threeHundredthsOfSecond);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;","map":null,"metadata":{},"sourceType":"script"}