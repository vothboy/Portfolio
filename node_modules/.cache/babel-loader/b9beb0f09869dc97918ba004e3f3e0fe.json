{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nvar BasicAuthenticationCredentials =\n/** @class */\nfunction () {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @constructor\n   * @param {string} userName User name.\n   * @param {string} password Password.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  function BasicAuthenticationCredentials(userName, password, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n\n\n  BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {\n    var credentials = this.userName + \":\" + this.password;\n    var encodedCredentials = this.authorizationScheme + \" \" + base64.encodeString(credentials);\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  };\n\n  return BasicAuthenticationCredentials;\n}();\n\nexport { BasicAuthenticationCredentials };","map":null,"metadata":{},"sourceType":"module"}