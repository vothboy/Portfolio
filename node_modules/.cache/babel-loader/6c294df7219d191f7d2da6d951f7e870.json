{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\n\nvar ApiKeyCredentials =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  function ApiKeyCredentials(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n    }\n\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n\n\n  ApiKeyCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n\n      for (var headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n      }\n\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n\n      for (var key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n\n        webResource.url += key + \"=\" + this.inQuery[key];\n      }\n    }\n\n    return Promise.resolve(webResource);\n  };\n\n  return ApiKeyCredentials;\n}();\n\nexport { ApiKeyCredentials };","map":null,"metadata":{},"sourceType":"module"}