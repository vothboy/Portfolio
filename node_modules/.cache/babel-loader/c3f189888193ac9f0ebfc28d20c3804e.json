{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar debug = require('debug')('mssql:base');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('../utils'),\n    IDS = _require2.IDS;\n\nvar globalConnection = require('../global-connection');\n\nvar _require3 = require('../error'),\n    TransactionError = _require3.TransactionError;\n\nvar shared = require('../shared');\n\nvar ISOLATION_LEVEL = require('../isolationlevel');\n/**\n * Class Transaction.\n *\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\n * @property {String} name Transaction name. Empty string by default.\n *\n * @fires Transaction#begin\n * @fires Transaction#commit\n * @fires Transaction#rollback\n */\n\n\nvar Transaction = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Transaction, _EventEmitter);\n\n  /**\n   * Create new Transaction.\n   *\n   * @param {Connection} [parent] If ommited, global connection is used instead.\n   */\n  function Transaction(parent) {\n    var _this;\n\n    _classCallCheck(this, Transaction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transaction).call(this));\n    IDS.add(_assertThisInitialized(_assertThisInitialized(_this)), 'Transaction');\n    debug('transaction(%d): created', IDS.get(_assertThisInitialized(_assertThisInitialized(_this))));\n    _this.parent = parent || globalConnection.pool;\n    _this.isolationLevel = Transaction.defaultIsolationLevel;\n    _this.name = '';\n    return _this;\n  }\n\n  _createClass(Transaction, [{\n    key: \"acquire\",\n\n    /**\n     * Acquire connection from connection pool.\n     *\n     * @param {Request} request Request.\n     * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n     * @return {Transaction|Promise}\n     */\n    value: function acquire(request, callback) {\n      if (!this._acquiredConnection) {\n        setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n        return this;\n      }\n\n      if (this._activeRequest) {\n        setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'));\n        return this;\n      }\n\n      this._activeRequest = request;\n      setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n      return this;\n    }\n    /**\n     * Release connection back to the pool.\n     *\n     * @param {Connection} connection Previously acquired connection.\n     * @return {Transaction}\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(connection) {\n      if (connection === this._acquiredConnection) {\n        this._activeRequest = null;\n      }\n\n      return this;\n    }\n    /**\n     * Begin a transaction.\n     *\n     * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\n     * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\n     * @return {Transaction|Promise}\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin(isolationLevel, callback) {\n      var _this2 = this;\n\n      if (isolationLevel instanceof Function) {\n        callback = isolationLevel;\n        isolationLevel = undefined;\n      }\n\n      if (typeof callback === 'function') {\n        this._begin(isolationLevel, function (err) {\n          if (!err) {\n            _this2.emit('begin');\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this2._begin(isolationLevel, function (err) {\n          if (err) return reject(err);\n\n          _this2.emit('begin');\n\n          resolve(_this2);\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {Number} [isolationLevel]\n     * @param {basicCallback} [callback]\n     * @return {Transaction}\n     */\n\n  }, {\n    key: \"_begin\",\n    value: function _begin(isolationLevel, callback) {\n      if (this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'));\n      }\n\n      this._aborted = false;\n      this._rollbackRequested = false;\n\n      if (isolationLevel) {\n        if (Object.keys(ISOLATION_LEVEL).some(function (key) {\n          return ISOLATION_LEVEL[key] === isolationLevel;\n        })) {\n          this.isolationLevel = isolationLevel;\n        } else {\n          throw new TransactionError('Invalid isolation level.');\n        }\n      }\n\n      setImmediate(callback);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\n     * @return {Transaction|Promise}\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit(callback) {\n      var _this3 = this;\n\n      if (typeof callback === 'function') {\n        this._commit(function (err) {\n          if (!err) {\n            _this3.emit('commit');\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this3._commit(function (err) {\n          if (err) return reject(err);\n\n          _this3.emit('commit');\n\n          resolve();\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {basicCallback} [callback]\n     * @return {Transaction}\n     */\n\n  }, {\n    key: \"_commit\",\n    value: function _commit(callback) {\n      if (this._aborted) {\n        return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n      }\n\n      if (!this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n      }\n\n      if (this._activeRequest) {\n        return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'));\n      }\n\n      setImmediate(callback);\n    }\n    /**\n     * Returns new request using this transaction.\n     *\n     * @return {Request}\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      return new shared.driver.Request(this);\n    }\n    /**\n     * Rollback a transaction.\n     *\n     * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\n     * @return {Transaction|Promise}\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback(callback) {\n      var _this4 = this;\n\n      if (typeof callback === 'function') {\n        this._rollback(function (err) {\n          if (!err) {\n            _this4.emit('rollback', _this4._aborted);\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        return _this4._rollback(function (err) {\n          if (err) return reject(err);\n\n          _this4.emit('rollback', _this4._aborted);\n\n          resolve();\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {basicCallback} [callback]\n     * @return {Transaction}\n     */\n\n  }, {\n    key: \"_rollback\",\n    value: function _rollback(callback) {\n      if (this._aborted) {\n        return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n      }\n\n      if (!this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n      }\n\n      if (this._activeRequest) {\n        return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'));\n      }\n\n      this._rollbackRequested = true;\n      setImmediate(callback);\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this.parent.connected;\n    }\n  }]);\n\n  return Transaction;\n}(EventEmitter);\n/**\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\n *\n * @type {number}\n */\n\n\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED;\nmodule.exports = Transaction;","map":null,"metadata":{},"sourceType":"script"}