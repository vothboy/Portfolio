{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TimeoutError_1 = require(\"./TimeoutError\");\n\nvar utils_1 = require(\"./utils\");\n\nvar PendingOperation = /*#__PURE__*/function () {\n  function PendingOperation(timeoutMillis) {\n    var _this = this;\n\n    _classCallCheck(this, PendingOperation);\n\n    this.timeoutMillis = timeoutMillis;\n    this.deferred = utils_1.defer();\n    this.possibleTimeoutCause = null;\n    this.promise = timeout(this.deferred.promise, timeoutMillis).catch(function (err) {\n      if (err instanceof TimeoutError_1.TimeoutError) {\n        if (_this.possibleTimeoutCause) {\n          err = new TimeoutError_1.TimeoutError(_this.possibleTimeoutCause.message);\n        } else {\n          err = new TimeoutError_1.TimeoutError('operation timed out for an unknown reason');\n        }\n      }\n\n      return Promise.reject(err);\n    });\n  }\n\n  _createClass(PendingOperation, [{\n    key: \"abort\",\n    value: function abort() {\n      this.reject(new Error('aborted'));\n    }\n  }, {\n    key: \"reject\",\n    value: function reject(err) {\n      this.deferred.reject(err);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(value) {\n      this.deferred.resolve(value);\n    }\n  }]);\n\n  return PendingOperation;\n}();\n\nexports.PendingOperation = PendingOperation;\n\nfunction timeout(promise, time) {\n  return new Promise(function (resolve, reject) {\n    var timeoutHandle = setTimeout(function () {\n      return reject(new TimeoutError_1.TimeoutError());\n    }, time);\n    promise.then(function (result) {\n      clearTimeout(timeoutHandle);\n      resolve(result);\n    }).catch(function (err) {\n      clearTimeout(timeoutHandle);\n      reject(err);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}