{"ast":null,"code":"'use strict';\n\nvar shared = require('./shared');\n\nvar globalConnection = null;\nvar globalConnectionHandlers = {};\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */\n\nfunction connect(config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config);\n\n    for (var event in globalConnectionHandlers) {\n      for (var i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i]);\n      }\n    }\n\n    var ogClose = globalConnection.close;\n\n    var globalClose = function globalClose(callback) {\n      var _this = this;\n\n      // remove event handlers from the global connection\n      for (var _event in globalConnectionHandlers) {\n        for (var _i = 0, _l = globalConnectionHandlers[_event].length; _i < _l; _i++) {\n          this.removeListener(_event, globalConnectionHandlers[_event][_i]);\n        }\n      } // attach error handler to prevent process crash in case of error\n\n\n      this.on('error', function (err) {\n        if (globalConnectionHandlers.error) {\n          for (var _i2 = 0, _l2 = globalConnectionHandlers.error.length; _i2 < _l2; _i2++) {\n            globalConnectionHandlers.error[_i2].call(_this, err);\n          }\n        }\n      });\n      globalConnection = null;\n      return ogClose.call(this, callback);\n    };\n\n    globalConnection.close = globalClose.bind(globalConnection);\n  }\n\n  if (typeof callback === 'function') {\n    return globalConnection.connect(function (err, connection) {\n      if (err) {\n        globalConnection = null;\n      }\n\n      callback(err, connection);\n    });\n  }\n\n  return globalConnection.connect().catch(function (err) {\n    globalConnection = null;\n    return shared.Promise.reject(err);\n  });\n}\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */\n\n\nfunction close(callback) {\n  if (globalConnection) {\n    var gc = globalConnection;\n    globalConnection = null;\n    return gc.close(callback);\n  }\n\n  if (typeof callback === 'function') {\n    setImmediate(callback);\n    return null;\n  }\n\n  return new shared.Promise(function (resolve) {\n    resolve(globalConnection);\n  });\n}\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\n\nfunction on(event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = [];\n  globalConnectionHandlers[event].push(handler);\n  if (globalConnection) globalConnection.on(event, handler);\n  return globalConnection;\n}\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\n\nfunction removeListener(event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection;\n  var index = globalConnectionHandlers[event].indexOf(handler);\n  if (index === -1) return globalConnection;\n  globalConnectionHandlers[event].splice(index, 1);\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined;\n  if (globalConnection) globalConnection.removeListener(event, handler);\n  return globalConnection;\n}\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\n\nfunction query() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().query(arguments[0], arguments[1]);\n  }\n\n  var values = Array.prototype.slice.call(arguments);\n  var strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'query');\n}\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\n\nfunction batch() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().batch(arguments[0], arguments[1]);\n  }\n\n  var values = Array.prototype.slice.call(arguments);\n  var strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'batch');\n}\n\nmodule.exports = {\n  batch: batch,\n  close: close,\n  connect: connect,\n  off: removeListener,\n  on: on,\n  query: query,\n  removeListener: removeListener\n};\nObject.defineProperty(module.exports, 'pool', {\n  get: function get() {\n    return globalConnection;\n  },\n  set: function set() {}\n});","map":null,"metadata":{},"sourceType":"script"}