{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_1 = require(\"fs\");\n\nvar crypto_1 = require(\"crypto\");\n\nvar applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n\nvar ApplicationTokenCertificateCredentials = /*#__PURE__*/function (_applicationTokenCred) {\n  _inherits(ApplicationTokenCertificateCredentials, _applicationTokenCred);\n\n  /**\n   * Creates a new ApplicationTokenCredentials object.\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for detailed instructions on creating an Azure Active Directory application.\n   * @constructor\n   * @param {string} clientId The active directory application client id.\n   * @param {string} domain The domain or tenant id containing this application.\n   * @param {string} certificate A PEM encoded certificate private key.\n   * @param {string} thumbprint A hex encoded thumbprint of the certificate.\n   * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n   * @param {Environment} [environment] The azure environment to authenticate with.\n   * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n   */\n  function ApplicationTokenCertificateCredentials(clientId, domain, certificate, thumbprint, tokenAudience, environment, tokenCache) {\n    var _this;\n\n    _classCallCheck(this, ApplicationTokenCertificateCredentials);\n\n    if (!certificate || typeof certificate.valueOf() !== \"string\") {\n      throw new Error(\"certificate must be a non empty string.\");\n    }\n\n    if (!thumbprint || typeof thumbprint.valueOf() !== \"string\") {\n      throw new Error(\"thumbprint must be a non empty string.\");\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationTokenCertificateCredentials).call(this, clientId, domain, tokenAudience, environment, tokenCache));\n    _this.certificate = certificate;\n    _this.thumbprint = thumbprint;\n    return _this;\n  }\n  /**\n   * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\n   * @returns {Promise<TokenResponse>} A promise that resolves to TokenResponse and rejects with an Error.\n   */\n\n\n  _createClass(ApplicationTokenCertificateCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var tokenResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.getTokenFromCache();\n\n              case 3:\n                tokenResponse = _context.sent;\n                return _context.abrupt(\"return\", tokenResponse);\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!_context.t0.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n              case 11:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var resource = _this2.getActiveDirectoryResourceId();\n\n                  _this2.authContext.acquireTokenWithClientCertificate(resource, _this2.clientId, _this2.certificate, _this2.thumbprint, function (error, tokenResponse) {\n                    if (error) {\n                      return reject(error);\n                    }\n\n                    if (tokenResponse.error || tokenResponse.errorDescription) {\n                      return reject(tokenResponse);\n                    }\n\n                    return resolve(tokenResponse);\n                  });\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new instance of ApplicationTokenCertificateCredentials.\n     *\n     * @param clientId  The active directory application client id also known as the SPN (ServicePrincipal Name).\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n     * for an example.\n     * @param {string} certificateStringOrFilePath A PEM encoded certificate and private key OR an absolute filepath to the .pem file containing that information. For example:\n     * - CertificateString: \"-----BEGIN PRIVATE KEY-----\\n<xxxxx>\\n-----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\\n<yyyyy>\\n-----END CERTIFICATE-----\\n\"\n     * - CertificateFilePath: **Absolute** file path of the .pem file.\n     * @param domain The domain or tenant id containing this application.\n     * @param options AzureTokenCredentialsOptions - Object representing optional parameters.\n     *\n     * @returns ApplicationTokenCertificateCredentials\n     */\n\n  }], [{\n    key: \"create\",\n    value: function create(clientId, certificateStringOrFilePath, domain, options) {\n      if (!certificateStringOrFilePath || typeof certificateStringOrFilePath.valueOf() !== \"string\") {\n        throw new Error(\"'certificateStringOrFilePath' must be a non empty string.\");\n      }\n\n      if (!certificateStringOrFilePath.startsWith(\"-----BEGIN\")) {\n        certificateStringOrFilePath = fs_1.readFileSync(certificateStringOrFilePath, \"utf8\");\n      }\n\n      var certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9\\+\\/\\n\\r]+\\=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/;\n      var matchCert = certificateStringOrFilePath.match(certificatePattern);\n      var rawCertificate = matchCert ? matchCert[3] : \"\";\n\n      if (!rawCertificate) {\n        throw new Error(\"Unable to correctly parse the certificate from the value provided in 'certificateStringOrFilePath' \");\n      }\n\n      var thumbprint = crypto_1.createHash(\"sha1\").update(Buffer.from(rawCertificate, \"base64\")).digest(\"hex\");\n      return new ApplicationTokenCertificateCredentials(clientId, domain, certificateStringOrFilePath, thumbprint, options.tokenAudience, options.environment, options.tokenCache);\n    }\n  }]);\n\n  return ApplicationTokenCertificateCredentials;\n}(applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase);\n\nexports.ApplicationTokenCertificateCredentials = ApplicationTokenCertificateCredentials;","map":null,"metadata":{},"sourceType":"script"}