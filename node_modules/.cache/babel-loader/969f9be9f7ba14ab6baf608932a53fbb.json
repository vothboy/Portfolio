{"ast":null,"code":"'use strict';\n\nvar ConnectionPool = require('./connection-pool');\n\nvar PreparedStatement = require('./prepared-statement');\n\nvar Request = require('./request');\n\nvar Transaction = require('./transaction');\n\nvar _require = require('../error'),\n    ConnectionError = _require.ConnectionError,\n    TransactionError = _require.TransactionError,\n    RequestError = _require.RequestError,\n    PreparedStatementError = _require.PreparedStatementError,\n    MSSQLError = _require.MSSQLError;\n\nvar shared = require('../shared');\n\nvar Table = require('../table');\n\nvar ISOLATION_LEVEL = require('../isolationlevel');\n\nvar _require2 = require('../datatypes'),\n    TYPES = _require2.TYPES;\n\nvar _require3 = require('../global-connection'),\n    connect = _require3.connect,\n    close = _require3.close,\n    on = _require3.on,\n    off = _require3.off,\n    removeListener = _require3.removeListener,\n    query = _require3.query,\n    batch = _require3.batch;\n\nmodule.exports = {\n  ConnectionPool: ConnectionPool,\n  Transaction: Transaction,\n  Request: Request,\n  PreparedStatement: PreparedStatement,\n  ConnectionError: ConnectionError,\n  TransactionError: TransactionError,\n  RequestError: RequestError,\n  PreparedStatementError: PreparedStatementError,\n  MSSQLError: MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError: ConnectionError,\n    TransactionError: TransactionError,\n    RequestError: RequestError,\n    PreparedStatementError: PreparedStatementError,\n    MSSQLError: MSSQLError,\n    Table: Table,\n    ISOLATION_LEVEL: ISOLATION_LEVEL,\n    TYPES: TYPES,\n    MAX: 65535,\n    // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect: connect,\n    close: close,\n    on: on,\n    removeListener: removeListener,\n    off: off,\n    query: query,\n    batch: batch\n  }\n};\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: function get() {\n    return shared.Promise;\n  },\n  set: function set(value) {\n    shared.Promise = value;\n  }\n});\n\nfor (var key in TYPES) {\n  var value = TYPES[key];\n  module.exports.exports[key] = value;\n  module.exports.exports[key.toUpperCase()] = value;\n}\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */","map":null,"metadata":{},"sourceType":"script"}