{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar constants = require('./constants');\n\nvar UserCodeResponseFields = constants.UserCodeResponseFields;\nvar argumentValidation = {\n  /**\r\n   * Throws if the passed in parameter is not a string.\r\n   * @param  {string} param   The parameter to validate.\r\n   * @param  {string} name    The name of the parameter being validated.\r\n   * @throws {Error} If the parameter is not a valid string.\r\n   */\n  validateStringParameter: function validateStringParameter(param, name) {\n    if (!param) {\n      throw new Error('The ' + name + ' parameter is required.');\n    }\n\n    if (!_.isString(param)) {\n      throw new Error('The ' + name + ' parameter must be of type String.');\n    }\n  },\n\n  /**\r\n   * Validates that the callback passed in {@link AuthenticationContext.acquireToken} is a function\r\n   * @param  {AcquireTokenCallback} callback\r\n   * @throws {Error} If the callback parameter is not a function\r\n   */\n  validateCallbackType: function validateCallbackType(callback) {\n    if (!callback || !_.isFunction(callback)) {\n      throw new Error('acquireToken requires a function callback parameter.');\n    }\n  },\n  validateUserCodeInfo: function validateUserCodeInfo(userCodeInfo) {\n    if (!userCodeInfo) {\n      throw new Error('The userCodeInfo parameter is required');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.DEVICE_CODE)) {\n      throw new Error('The userCodeInfo is missing device_code');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.INTERVAL)) {\n      throw new Error('The userCodeInfo is missing interval');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.EXPIRES_IN)) {\n      throw new Error('The userCodeInfo is missing expires_in');\n    }\n  }\n};\nmodule.exports = argumentValidation;","map":null,"metadata":{},"sourceType":"script"}