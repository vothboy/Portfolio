{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar request = require('request');\n\nvar uuid = require('uuid');\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n\nvar WSTrustResponse = require('./wstrust-response');\n\nvar WSTrustVersion = require('./constants').WSTrustVersion;\n\nvar USERNAME_PLACEHOLDER = '{UsernamePlaceHolder}';\nvar PASSWORD_PLACEHOLDER = '{PasswordPlaceHolder}';\n/**\r\n * Creates a new instance of WSTrustRequest\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {string}     wstrustEndpointUrl    An STS WS-Trust soap endpoint.\r\n * @param {string}     appliesTo             A URI that identifies a service for which the a token is to be obtained.\r\n */\n\nfunction WSTrustRequest(callContext, wstrustEndpointUrl, appliesTo, wstrustEndpointVersion) {\n  this._log = new Logger('WSTrustRequest', callContext._logContext);\n  this._callContext = callContext;\n  this._wstrustEndpointUrl = wstrustEndpointUrl;\n  this._appliesTo = appliesTo;\n  this._wstrustEndpointVersion = wstrustEndpointVersion;\n}\n/**\r\n* Given a Date object adds the minutes parameter and returns a new Date object.\r\n* @private\r\n* @static\r\n* @memberOf WSTrustRequest\r\n* @param {Date}     date      A Date object.\r\n* @param {Number}   minutes   The number of minutes to add to the date parameter.\r\n* @returns {Date}             Returns a Date object.\r\n*/\n\n\nfunction _datePlusMinutes(date, minutes) {\n  var minutesInMilliSeconds = minutes * 60 * 1000;\n  var epochTime = date.getTime() + minutesInMilliSeconds;\n  return new Date(epochTime);\n}\n/**\r\n * Builds the soap security header for the RST message.\r\n * @private\r\n * @param {string}   username  A username\r\n * @param {string}   password  The passowrd that corresponds to the username parameter.\r\n * @returns {string}           A string that contains the soap security header.\r\n */\n\n\nWSTrustRequest.prototype._buildSecurityHeader = function () {\n  var timeNow = new Date();\n\n  var expireTime = _datePlusMinutes(timeNow, 10);\n\n  var timeNowString = timeNow.toISOString();\n  var expireTimeString = expireTime.toISOString();\n  var securityHeaderXml = '<wsse:Security s:mustUnderstand=\\'1\\' xmlns:wsse=\\'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\'>\\\r\n    <wsu:Timestamp wsu:Id=\\'_0\\'>\\\r\n      <wsu:Created>' + timeNowString + '</wsu:Created>\\\r\n      <wsu:Expires>' + expireTimeString + '</wsu:Expires>\\\r\n    </wsu:Timestamp>\\\r\n    <wsse:UsernameToken wsu:Id=\\'ADALUsernameToken\\'>\\\r\n      <wsse:Username>' + USERNAME_PLACEHOLDER + '</wsse:Username>\\\r\n      <wsse:Password>' + PASSWORD_PLACEHOLDER + '</wsse:Password>\\\r\n    </wsse:UsernameToken>\\\r\n    </wsse:Security>';\n  return securityHeaderXml;\n};\n/**\r\n * Replaces the placeholders in the RST template with the actual username and password values.\r\n * @private\r\n * @param {string}   RSTTemplate  An RST with placeholders for username and password.\r\n * @param {string}   username     A username\r\n * @param {string}   password     The passowrd that corresponds to the username parameter.\r\n * @returns {string}              A string containing a complete RST soap message.\r\n */\n\n\nWSTrustRequest.prototype._populateRSTUsernamePassword = function (RSTTemplate, username, password) {\n  var RST = RSTTemplate.replace(USERNAME_PLACEHOLDER, username).replace(PASSWORD_PLACEHOLDER, this._populatedEscapedPassword(password));\n  return RST;\n};\n/**\r\n * Escape xml characters in password. \r\n * @private\r\n * @param {string} password The password to be excaped with xml charaters. \r\n */\n\n\nWSTrustRequest.prototype._populatedEscapedPassword = function (password) {\n  var escapedPassword = password;\n  return escapedPassword.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n/**\r\n * Builds a WS-Trust RequestSecurityToken (RST) message using username password authentication.\r\n * @private\r\n * @param {string}   username  A username\r\n * @param {string}   password  The passowrd that corresponds to the username parameter.\r\n * @returns {string}           A string containing a complete RST soap message.\r\n */\n\n\nWSTrustRequest.prototype._buildRST = function (username, password) {\n  var messageID = uuid.v4(); // Create a template RST with placeholders for the username and password so the\n  // the RST can be logged without the sensitive information.\n\n  var schemaLocation = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';\n  var soapAction = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n  var rstTrustNamespace = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512';\n  var keyType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer';\n  var requestType = 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue';\n\n  if (this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005) {\n    soapAction = 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue';\n    rstTrustNamespace = 'http://schemas.xmlsoap.org/ws/2005/02/trust';\n    keyType = 'http://schemas.xmlsoap.org/ws/2005/05/identity/NoProofKey';\n    requestType = 'http://schemas.xmlsoap.org/ws/2005/02/trust/Issue';\n  }\n\n  var RSTTemplate = '<s:Envelope xmlns:s=\\'http://www.w3.org/2003/05/soap-envelope\\' xmlns:wsa=\\'http://www.w3.org/2005/08/addressing\\' xmlns:wsu=\\'' + schemaLocation + '\\'>\\\r\n      <s:Header>\\\r\n        <wsa:Action s:mustUnderstand=\\'1\\'>' + soapAction + '</wsa:Action>\\\r\n        <wsa:messageID>urn:uuid:' + messageID + '</wsa:messageID>\\\r\n        <wsa:ReplyTo>\\\r\n          <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>\\\r\n        </wsa:ReplyTo>\\\r\n        <wsa:To s:mustUnderstand=\\'1\\'>' + this._wstrustEndpointUrl + '</wsa:To>\\\r\n        ' + this._buildSecurityHeader() + '\\\r\n      </s:Header>\\\r\n      <s:Body>\\\r\n        <wst:RequestSecurityToken xmlns:wst=\\'' + rstTrustNamespace + '\\'>\\\r\n          <wsp:AppliesTo xmlns:wsp=\\'http://schemas.xmlsoap.org/ws/2004/09/policy\\'>\\\r\n            <wsa:EndpointReference>\\\r\n              <wsa:Address>' + this._appliesTo + '</wsa:Address>\\\r\n            </wsa:EndpointReference>\\\r\n          </wsp:AppliesTo>\\\r\n          <wst:KeyType>' + keyType + '</wst:KeyType>\\\r\n          <wst:RequestType>' + requestType + '</wst:RequestType>\\\r\n        </wst:RequestSecurityToken>\\\r\n      </s:Body>\\\r\n    </s:Envelope>';\n\n  this._log.verbose('Created RST: \\n' + RSTTemplate, true);\n\n  var RST = this._populateRSTUsernamePassword(RSTTemplate, username, password);\n\n  return RST;\n};\n/**\r\n * Handles the processing of a RSTR\r\n * @private\r\n * @param  {string}   body\r\n * @param  {WSTrustRequest.AcquireTokenCallback} callback\r\n */\n\n\nWSTrustRequest.prototype._handleRSTR = function (body, callback) {\n  var err;\n  var wstrustResponse = new WSTrustResponse(this._callContext, body, this._wstrustEndpointVersion);\n\n  try {\n    wstrustResponse.parse();\n  } catch (error) {\n    err = error;\n  }\n\n  callback(err, wstrustResponse);\n};\n/**\r\n * Performs a WS-Trust RequestSecurityToken request to obtain a federated token in exchange for a username password.\r\n * @param {string}   username  A username\r\n * @param {string}   password  The passowrd that corresponds to the username parameter.\r\n * @param {WSTrustRequest.AcquireTokenCallback} callback   Called once the federated token has been retrieved or on error.\r\n*/\n\n\nWSTrustRequest.prototype.acquireToken = function (username, password, callback) {\n  if (this._wstrustEndpointVersion === WSTrustVersion.UNDEFINED) {\n    var err = this._log.createError('Unsupported wstrust endpoint version. Current support version is wstrust2005 or wstrust13.');\n\n    callback(err);\n    return;\n  }\n\n  var self = this;\n\n  var RST = this._buildRST(username, password);\n\n  var soapAction = this._wstrustEndpointVersion === WSTrustVersion.WSTRUST2005 ? 'http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue' : 'http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue';\n  var options = util.createRequestOptions(this, {\n    headers: {\n      'Content-Type': 'application/soap+xml; charset=utf-8',\n      'SOAPAction': soapAction\n    },\n    body: RST\n  });\n\n  this._log.verbose('Sending RST to: ' + this._wstrustEndpointUrl, true);\n\n  request.post(this._wstrustEndpointUrl, options, util.createRequestHandler('WS-Trust RST', this._log, callback, function (response, body) {\n    self._handleRSTR(body, callback);\n  }));\n};\n/**\r\n* @callback AcquireTokenCallback\r\n* @memberOf WSTrustRequest\r\n* @param {Error} err   Contains an error object if acquireToken fails.\r\n* @param {WSTrustResponse} A successful response to the RST.\r\n*/\n\n\nmodule.exports = WSTrustRequest;","map":null,"metadata":{},"sourceType":"script"}