{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nexport function throttlingRetryPolicy() {\n  return {\n    create: function create(nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\n\nvar ThrottlingRetryPolicy =\n/** @class */\nfunction (_super) {\n  __extends(ThrottlingRetryPolicy, _super);\n\n  function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this._handleResponse = _handleResponse || _this._defaultResponseHandler;\n    return _this;\n  }\n\n  ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n          if (response.status !== StatusCodes.TooManyRequests) {\n            return response;\n          } else {\n            return _this._handleResponse(httpRequest, response);\n          }\n        })];\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryAfterHeader, delayInMs;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n        if (retryAfterHeader) {\n          delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n\n          if (delayInMs) {\n            return [2\n            /*return*/\n            , delay(delayInMs).then(function (_) {\n              return _this._nextPolicy.sendRequest(httpRequest);\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        , httpResponse];\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n    var retryAfterInSeconds = Number(headerValue);\n\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  };\n\n  ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n    try {\n      var now = Date.now();\n      var date = Date.parse(headerValue);\n      var diff = date - now;\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  };\n\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { ThrottlingRetryPolicy };","map":null,"metadata":{},"sourceType":"module"}