{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar parser = new DOMParser();\nexport function parseXML(str) {\n  try {\n    var dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n    var obj = domToObject(dom.childNodes[0]);\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nvar errorNS = \"\";\n\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI;\n} catch (ignored) {// Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom) {\n  if (errorNS) {\n    var parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0).innerHTML);\n    }\n  }\n}\n\nfunction isElement(node) {\n  return !!node.attributes;\n}\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\n\n\nfunction asElementWithAttributes(node) {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node) {\n  var result = {};\n  var childNodeCount = node.childNodes.length;\n  var firstChildNode = node.childNodes[0];\n  var onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || undefined;\n  var elementWithAttributes = asElementWithAttributes(node);\n\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (var i = 0; i < elementWithAttributes.attributes.length; i++) {\n      var attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (var i = 0; i < childNodeCount; i++) {\n      var child = node.childNodes[i]; // Ignore leading/trailing whitespace nodes\n\n      if (child.nodeType !== Node.TEXT_NODE) {\n        var childObject = domToObject(child);\n\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n} // tslint:disable-next-line:no-null-keyword\n\n\nvar doc = document.implementation.createDocument(null, null, null);\nvar serializer = new XMLSerializer();\nexport function stringifyXML(obj, opts) {\n  var rootName = opts && opts.rootName || \"root\";\n  var dom = buildNode(obj, rootName)[0];\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom);\n}\n\nfunction buildAttributes(attrs) {\n  var result = [];\n\n  for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {\n    var key = _a[_i];\n    var attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n\n  return result;\n}\n\nfunction buildNode(obj, elementName) {\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    var elem = doc.createElement(elementName);\n    elem.textContent = obj.toString();\n    return [elem];\n  } else if (Array.isArray(obj)) {\n    var result = [];\n\n    for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {\n      var arrayElem = obj_1[_i];\n\n      for (var _a = 0, _b = buildNode(arrayElem, elementName); _a < _b.length; _a++) {\n        var child = _b[_a];\n        result.push(child);\n      }\n    }\n\n    return result;\n  } else if (typeof obj === \"object\") {\n    var elem = doc.createElement(elementName);\n\n    for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {\n      var key = _d[_c];\n\n      if (key === \"$\") {\n        for (var _e = 0, _f = buildAttributes(obj[key]); _e < _f.length; _e++) {\n          var attr = _f[_e];\n          elem.attributes.setNamedItem(attr);\n        }\n      } else {\n        for (var _g = 0, _h = buildNode(obj[key], key); _g < _h.length; _g++) {\n          var child = _h[_g];\n          elem.appendChild(child);\n        }\n      }\n    }\n\n    return [elem];\n  } else {\n    throw new Error(\"Illegal value passed to buildObject: \" + obj);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}