{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar adalIdConstants = require('./constants').AdalIdParameters;\n\nvar os = require('os');\n\nvar url = require('url');\n\nvar ADAL_VERSION;\n/**\r\n * @namespace  Util\r\n * @private\r\n */\n\nfunction loadAdalVersion() {\n  ADAL_VERSION = require('../package.json').version;\n}\n\nfunction adalInit() {\n  loadAdalVersion();\n}\n/**\r\n * @static\r\n * @memberOf Util\r\n * @param {string|int}   statusCode  An HTTP status code.\r\n */\n\n\nfunction isHttpSuccess(statusCode) {\n  return statusCode >= 200 && statusCode < 300;\n}\n\nfunction addDefaultRequestHeaders(self, options) {\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  var headers = options.headers;\n\n  if (!headers['Accept-Charset']) {\n    headers['Accept-Charset'] = 'utf-8';\n  }\n\n  headers['client-request-id'] = self._callContext._logContext.correlationId;\n  headers['return-client-request-id'] = 'true'; // ADAL Id headers\n\n  headers[adalIdConstants.SKU] = adalIdConstants.NODE_SKU;\n  headers[adalIdConstants.VERSION] = ADAL_VERSION;\n  headers[adalIdConstants.OS] = os.platform();\n  headers[adalIdConstants.CPU] = os.arch();\n}\n/**\r\n* Central place for housing default request options.  This is a place holder\r\n* for when SSL validation is implemented an all requests are subject to that\r\n* policy.\r\n* @static\r\n* @memberOf Util\r\n* @param {object} options   A set of options that will be merged with teh default options\r\n*                           These will override any default options.\r\n* @returns {object}         Returns the merged options.\r\n*/\n\n\nfunction createRequestOptions(self, options) {\n  var defaultOptions = {}; //{ strictSSL : true };\n\n  var mergedOptions = defaultOptions;\n\n  if (options) {\n    _.extend(mergedOptions, options);\n  }\n\n  if (self._callContext.options && self._callContext.options.http) {\n    _.extend(mergedOptions, self._callContext.options.http);\n  }\n\n  addDefaultRequestHeaders(self, mergedOptions);\n  return mergedOptions;\n}\n\nfunction logReturnCorrelationId(log, operationMessage, response) {\n  if (response && response.headers && response.headers['client-request-id']) {\n    log.info(operationMessage + 'Server returned this correlationId: ' + response.headers['client-request-id'], true);\n  }\n}\n/**\r\n* Creates a function that can be used as the callback for http request operations.  This is meant\r\n* to centralize error handling in one place.\r\n* @static\r\n* @memberOf Util\r\n* @param {string} operationMessage  A message to be prepended to logged error strings.  This should be something like 'Mex Request'\r\n*                                   and summarize the purpose of the http request.\r\n* @param {object} log               A Logger object being used by the calling component.\r\n* @param {Util.CreateRequestHandlerErrorCallback}    errorCallback   Called in the event of an error.\r\n* @param {Util.CreateRequestHandlerSuccessCallabck}  successCallback Called on successfull completion of the request.\r\n*/\n\n\nfunction createRequestHandler(operationMessage, log, errorCallback, successCallback) {\n  return function (err, response, body) {\n    logReturnCorrelationId(log, operationMessage, response);\n\n    if (err) {\n      log.error(operationMessage + ' request failed with', err, true);\n      errorCallback(err);\n      return;\n    }\n\n    if (!isHttpSuccess(response.statusCode)) {\n      var returnErrorString = operationMessage + ' request returned http error: ' + response.statusCode;\n      var errorResponse;\n\n      if (body) {\n        returnErrorString += ' and server response: ' + body;\n\n        try {\n          errorResponse = JSON.parse(body);\n        } catch (e) {// No problem if it doesn't parse.\n        }\n      }\n\n      errorCallback(log.createError(returnErrorString, true), errorResponse);\n      return;\n    }\n\n    successCallback(response, body);\n  };\n}\n/**\r\n* @callback CreateRequestHandlerErrorCallback\r\n* @memberOf Util\r\n* @param {Error}  error  An error object.\r\n*/\n\n/**\r\n* @callback CreateRequestHandlerSuccessCallabck\r\n* @memberOf Util\r\n* @param {object} response    The response object returned from request.\r\n* @param {string} body        The body of the http response.\r\n*/\n\n/**\r\n* Deep copies a url object.\r\n* @static\r\n* @memberOf Util\r\n* @param {URL} urlSource   The source url object to copy.\r\n* @returns {URL}           A deep copy of sourceUrl.\r\n*/\n\n\nfunction copyUrl(urlSource) {\n  return url.parse(url.format(urlSource));\n}\n\nfunction convertUrlSafeToRegularBase64EncodedString(str) {\n  return str.replace(/-/g, '+').replace(/_/g, '/');\n}\n\nfunction convertRegularToUrlSafeBase64EncodedString(str) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64DecodeStringUrlSafe(str) {\n  var base64 = convertUrlSafeToRegularBase64EncodedString(str);\n  return new Buffer(base64, 'base64').toString('utf8');\n}\n\nfunction base64EncodeStringUrlSafe(str) {\n  var base64 = new Buffer(str, 'utf8').toString('base64');\n  var converted = convertRegularToUrlSafeBase64EncodedString(base64);\n  return converted;\n}\n\nmodule.exports.adalInit = adalInit;\nmodule.exports.isHttpSuccess = isHttpSuccess;\nmodule.exports.createRequestHandler = createRequestHandler;\nmodule.exports.createRequestOptions = createRequestOptions;\nmodule.exports.copyUrl = copyUrl;\nmodule.exports.base64DecodeStringUrlSafe = base64DecodeStringUrlSafe;\nmodule.exports.base64EncodeStringUrlSafe = base64EncodeStringUrlSafe;\nmodule.exports.convertRegularToUrlSafeBase64EncodedString = convertRegularToUrlSafeBase64EncodedString;","map":null,"metadata":{},"sourceType":"script"}