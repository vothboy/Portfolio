{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar NULL = (1 << 16) - 1;\nvar MAX = (1 << 16) - 1;\nvar VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    var value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    var length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    var value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(this.maximumLength);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value);\n      } else {\n        buffer.writePLPBody(parameter.value);\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(NULL);\n    } else {\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;","map":null,"metadata":{},"sourceType":"script"}