{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n/**\n * @class MSITokenCredentials - Provides information about managed service identity token credentials.\n * This object can only be used to acquire token on a virtual machine provisioned in Azure with managed service identity.\n */\n\n\nvar MSITokenCredentials = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of MSITokenCredentials.\n   * @param {object} [options] - Optional parameters\n   * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n   * For e.g. it can be:\n   * - resource management endpoint \"https://management.azure.com/\"(default)\n   * - management endpoint \"https://management.core.windows.net/\"\n   */\n  function MSITokenCredentials(options) {\n    _classCallCheck(this, MSITokenCredentials);\n\n    if (!options) options = {};\n\n    if (!options.resource) {\n      options.resource = authConstants_1.AuthConstants.RESOURCE_MANAGER_ENDPOINT;\n    } else if (typeof options.resource.valueOf() !== \"string\") {\n      throw new Error(\"resource must be a uri.\");\n    }\n\n    this.resource = options.resource;\n    this._httpClient = options.httpClient || new ms_rest_js_1.DefaultHttpClient();\n  }\n  /**\n   * Parses a tokenResponse json string into a object, and converts properties on the first level to camelCase.\n   * This method tries to standardize the tokenResponse\n   * @param  {string} body  A json string\n   * @return {object} [tokenResponse] The tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  _createClass(MSITokenCredentials, [{\n    key: \"parseTokenResponse\",\n    value: function parseTokenResponse(body) {\n      // Docs show different examples of possible MSI responses for different services. https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview\n      // expires_on - is a Date like string in this doc\n      //   - https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity#rest-protocol-examples\n      // In other doc it is stringified number.\n      //   - https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/tutorial-linux-vm-access-arm#get-an-access-token-using-the-vms-identity-and-use-it-to-call-resource-manager\n      var parsedBody = JSON.parse(body);\n      parsedBody.accessToken = parsedBody[\"access_token\"];\n      delete parsedBody[\"access_token\"];\n      parsedBody.tokenType = parsedBody[\"token_type\"];\n      delete parsedBody[\"token_type\"];\n\n      if (parsedBody[\"refresh_token\"]) {\n        parsedBody.refreshToken = parsedBody[\"refresh_token\"];\n        delete parsedBody[\"refresh_token\"];\n      }\n\n      if (parsedBody[\"expires_in\"]) {\n        parsedBody.expiresIn = parsedBody[\"expires_in\"];\n\n        if (typeof parsedBody[\"expires_in\"] === \"string\") {\n          // normal number as a string '1504130527'\n          parsedBody.expiresIn = parseInt(parsedBody[\"expires_in\"], 10);\n        }\n\n        delete parsedBody[\"expires_in\"];\n      }\n\n      if (parsedBody[\"not_before\"]) {\n        parsedBody.notBefore = parsedBody[\"not_before\"];\n\n        if (typeof parsedBody[\"not_before\"] === \"string\") {\n          // normal number as a string '1504130527'\n          parsedBody.notBefore = parseInt(parsedBody[\"not_before\"], 10);\n        }\n\n        delete parsedBody[\"not_before\"];\n      }\n\n      if (parsedBody[\"expires_on\"]) {\n        parsedBody.expiresOn = parsedBody[\"expires_on\"];\n\n        if (typeof parsedBody[\"expires_on\"] === \"string\") {\n          // possibly a Date string '09/14/2017 00:00:00 PM +00:00'\n          if (parsedBody[\"expires_on\"].includes(\":\") || parsedBody[\"expires_on\"].includes(\"/\")) {\n            parsedBody.expiresOn = new Date(parsedBody[\"expires_on\"], 10);\n          } else {\n            // normal number as a string '1504130527'\n            parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\n          }\n        }\n\n        delete parsedBody[\"expires_on\"];\n      }\n\n      return parsedBody;\n    }\n    /**\n     * Signs a request with the Authentication header.\n     *\n     * @param {webResource} The WebResource to be signed.\n     * @return {Promise<WebResource>} Promise with signed WebResource.\n     */\n\n  }, {\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tokenResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getToken();\n\n              case 2:\n                tokenResponse = _context.sent;\n                webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, \"\".concat(tokenResponse.tokenType, \" \").concat(tokenResponse.accessToken));\n                return _context.abrupt(\"return\", Promise.resolve(webResource));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return MSITokenCredentials;\n}();\n\nexports.MSITokenCredentials = MSITokenCredentials;","map":null,"metadata":{},"sourceType":"script"}