{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nvar login_1 = require(\"../login\");\n/**\n * Describes the credentials by retrieving token via Azure CLI.\n */\n\n\nvar AzureCliCredentials = /*#__PURE__*/function () {\n  function AzureCliCredentials(subscriptionInfo, tokenInfo) {\n    var resource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://management.azure.com\";\n\n    _classCallCheck(this, AzureCliCredentials);\n\n    /**\n     * Azure resource endpoints.\n     * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\n     * - For Azure KeyVault: \"https://vault.azure.net\"\n     * - For Azure Batch: \"https://batch.core.windows.net\"\n     * - For Azure Active Directory Graph: \"https://graph.windows.net\"\n     *\n     * To get the resource for other clouds:\n     * - `az cloud list`\n     */\n    // tslint:disable-next-line: no-inferrable-types\n    this.resource = \"https://management.azure.com\";\n    /**\n     * The number of seconds within which it is good to renew the token.\n     *  A constant set to 270 seconds (4.5 minutes).\n     */\n\n    this._tokenRenewalMarginInSeconds = 270;\n    this.subscriptionInfo = subscriptionInfo;\n    this.tokenInfo = tokenInfo;\n    this.resource = resource;\n  }\n  /**\n   * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\n   * changed else uses the cached accessToken.\n   * @return The tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  _createClass(AzureCliCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged())) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return AzureCliCredentials.getAccessToken({\n                  subscriptionIdOrName: this.subscriptionInfo.id,\n                  resource: this.resource\n                });\n\n              case 4:\n                this.tokenInfo = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                throw new Error(\"An error occurred while refreshing the new access \" + \"token:\".concat(_context.t0.stderr ? _context.t0.stderr : _context.t0.message));\n\n              case 10:\n                result = {\n                  accessToken: this.tokenInfo.accessToken,\n                  tokenType: this.tokenInfo.tokenType,\n                  expiresOn: this.tokenInfo.expiresOn,\n                  tenantId: this.tokenInfo.tenant\n                };\n                return _context.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n    }\n    /**\n     * Signs a request with the Authentication header.\n     * @param The request to be signed.\n     */\n\n  }, {\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var tokenResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getToken();\n\n              case 2:\n                tokenResponse = _context2.sent;\n                webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, \"\".concat(tokenResponse.tokenType, \" \").concat(tokenResponse.accessToken));\n                return _context2.abrupt(\"return\", Promise.resolve(webResource));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_hasTokenExpired\",\n    value: function _hasTokenExpired() {\n      var result = true;\n      var now = Math.floor(Date.now() / 1000);\n\n      if (this.tokenInfo.expiresOn && this.tokenInfo.expiresOn instanceof Date && Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n        result = false;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_hasSubscriptionChanged\",\n    value: function _hasSubscriptionChanged() {\n      return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n    }\n  }, {\n    key: \"_parseToken\",\n    value: function _parseToken() {\n      try {\n        var base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n        var base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(base64);\n      } catch (err) {\n        var msg = \"An error occurred while parsing the access token: \".concat(err.stack);\n        throw new Error(msg);\n      }\n    }\n  }, {\n    key: \"_isAzureResourceManagerEndpoint\",\n    value: function _isAzureResourceManagerEndpoint(newResource, currentResource) {\n      if (newResource.endsWith(\"/\")) newResource = newResource.slice(0, -1);\n      if (currentResource.endsWith(\"/\")) currentResource = currentResource.slice(0, -1);\n      return newResource === \"https://management.core.windows.net\" && currentResource === \"https://management.azure.com\" || newResource === \"https://management.azure.com\" && currentResource === \"https://management.core.windows.net\";\n    }\n  }, {\n    key: \"_hasResourceChanged\",\n    value: function _hasResourceChanged() {\n      var parsedToken = this._parseToken(); // normalize the resource string, since it is possible to\n      // provide a resource without a trailing slash\n\n\n      var currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\") ? parsedToken.aud.slice(0, -1) : parsedToken.aud;\n      var newResource = this.resource.endsWith(\"/\") ? this.resource.slice(0, -1) : this.resource;\n      var result = this._isAzureResourceManagerEndpoint(newResource, currentResource) ? false : currentResource !== newResource;\n      return result;\n    }\n    /**\n     * Gets the access token for the default or specified subscription.\n     * @param options Optional parameters that can be provided to get the access token.\n     */\n\n  }], [{\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cmd, result, message;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                cmd = \"account get-access-token\";\n\n                if (options.subscriptionIdOrName) {\n                  cmd += \" -s \\\"\".concat(options.subscriptionIdOrName, \"\\\"\");\n                }\n\n                if (options.resource) {\n                  cmd += \" --resource \".concat(options.resource);\n                }\n\n                _context3.next = 6;\n                return login_1.execAz(cmd);\n\n              case 6:\n                result = _context3.sent;\n                result.expiresOn = new Date(result.expiresOn);\n                return _context3.abrupt(\"return\", result);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](0);\n                message = \"An error occurred while getting credentials from \" + \"Azure CLI: \".concat(_context3.t0.stack);\n                throw new Error(message);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 11]]);\n      }));\n    }\n    /**\n     * Gets the subscription from Azure CLI.\n     * @param subscriptionIdOrName - The name or id of the subscription for which the information is\n     * required.\n     */\n\n  }, {\n    key: \"getSubscription\",\n    value: function getSubscription(subscriptionIdOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var cmd, result, message;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length))) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n\n              case 2:\n                _context4.prev = 2;\n                cmd = \"account show\";\n\n                if (subscriptionIdOrName) {\n                  cmd += \" -s \\\"\".concat(subscriptionIdOrName, \"\\\"\");\n                }\n\n                _context4.next = 7;\n                return login_1.execAz(cmd);\n\n              case 7:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](2);\n                message = \"An error occurred while getting information about the current subscription from \" + \"Azure CLI: \".concat(_context4.t0.stack);\n                throw new Error(message);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 11]]);\n      }));\n    }\n    /**\n     * Sets the specified subscription as the default subscription for Azure CLI.\n     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\n     * default subscription.\n     */\n\n  }, {\n    key: \"setDefaultSubscription\",\n    value: function setDefaultSubscription(subscriptionIdOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var message;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return login_1.execAz(\"account set -s \".concat(subscriptionIdOrName));\n\n              case 3:\n                _context5.next = 9;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                message = \"An error occurred while setting the current subscription from \" + \"Azure CLI: \".concat(_context5.t0.stack);\n                throw new Error(message);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[0, 5]]);\n      }));\n    }\n    /**\n     * Returns a list of all the subscriptions from Azure CLI.\n     * @param options Optional parameters that can be provided while listing all the subcriptions.\n     */\n\n  }, {\n    key: \"listAllSubscriptions\",\n    value: function listAllSubscriptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var subscriptionList, cmd, _iterator, _step, sub, message;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                subscriptionList = [];\n                _context6.prev = 1;\n                cmd = \"account list\";\n\n                if (options.all) {\n                  cmd += \" --all\";\n                }\n\n                if (options.refresh) {\n                  cmd += \"--refresh\";\n                }\n\n                _context6.next = 7;\n                return login_1.execAz(cmd);\n\n              case 7:\n                subscriptionList = _context6.sent;\n\n                if (subscriptionList && subscriptionList.length) {\n                  _iterator = _createForOfIteratorHelper(subscriptionList);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      sub = _step.value;\n\n                      if (sub.cloudName) {\n                        sub.environmentName = sub.cloudName;\n                        delete sub.cloudName;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                }\n\n                return _context6.abrupt(\"return\", subscriptionList);\n\n              case 12:\n                _context6.prev = 12;\n                _context6.t0 = _context6[\"catch\"](1);\n                message = \"An error occurred while getting a list of all the subscription from \" + \"Azure CLI: \".concat(_context6.t0.stack);\n                throw new Error(message);\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 12]]);\n      }));\n    }\n    /**\n     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\n     * **Pre-requisite**\n     * - **install azure-cli** . For more information see\n     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\n     * - **login via `az login`**\n     * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _yield$Promise$all, _yield$Promise$all2, subscriptinInfo, accessToken;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return Promise.all([AzureCliCredentials.getSubscription(options.subscriptionIdOrName), AzureCliCredentials.getAccessToken(options)]);\n\n              case 2:\n                _yield$Promise$all = _context7.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                subscriptinInfo = _yield$Promise$all2[0];\n                accessToken = _yield$Promise$all2[1];\n                return _context7.abrupt(\"return\", new AzureCliCredentials(subscriptinInfo, accessToken, options.resource));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    }\n  }]);\n\n  return AzureCliCredentials;\n}();\n\nexports.AzureCliCredentials = AzureCliCredentials;","map":null,"metadata":{},"sourceType":"script"}