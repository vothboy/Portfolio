{"ast":null,"code":"'use strict';\n\nvar objectHasProperty = require('./utils').objectHasProperty;\n\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\nvar TYPES = {\n  VarChar: function VarChar(length) {\n    return {\n      type: TYPES.VarChar,\n      length: length\n    };\n  },\n  NVarChar: function NVarChar(length) {\n    return {\n      type: TYPES.NVarChar,\n      length: length\n    };\n  },\n  Text: function Text() {\n    return {\n      type: TYPES.Text\n    };\n  },\n  Int: function Int() {\n    return {\n      type: TYPES.Int\n    };\n  },\n  BigInt: function BigInt() {\n    return {\n      type: TYPES.BigInt\n    };\n  },\n  TinyInt: function TinyInt() {\n    return {\n      type: TYPES.TinyInt\n    };\n  },\n  SmallInt: function SmallInt() {\n    return {\n      type: TYPES.SmallInt\n    };\n  },\n  Bit: function Bit() {\n    return {\n      type: TYPES.Bit\n    };\n  },\n  Float: function Float() {\n    return {\n      type: TYPES.Float\n    };\n  },\n  Numeric: function Numeric(precision, scale) {\n    return {\n      type: TYPES.Numeric,\n      precision: precision,\n      scale: scale\n    };\n  },\n  Decimal: function Decimal(precision, scale) {\n    return {\n      type: TYPES.Decimal,\n      precision: precision,\n      scale: scale\n    };\n  },\n  Real: function Real() {\n    return {\n      type: TYPES.Real\n    };\n  },\n  Date: function Date() {\n    return {\n      type: TYPES.Date\n    };\n  },\n  DateTime: function DateTime() {\n    return {\n      type: TYPES.DateTime\n    };\n  },\n  DateTime2: function DateTime2(scale) {\n    return {\n      type: TYPES.DateTime2,\n      scale: scale\n    };\n  },\n  DateTimeOffset: function DateTimeOffset(scale) {\n    return {\n      type: TYPES.DateTimeOffset,\n      scale: scale\n    };\n  },\n  SmallDateTime: function SmallDateTime() {\n    return {\n      type: TYPES.SmallDateTime\n    };\n  },\n  Time: function Time(scale) {\n    return {\n      type: TYPES.Time,\n      scale: scale\n    };\n  },\n  UniqueIdentifier: function UniqueIdentifier() {\n    return {\n      type: TYPES.UniqueIdentifier\n    };\n  },\n  SmallMoney: function SmallMoney() {\n    return {\n      type: TYPES.SmallMoney\n    };\n  },\n  Money: function Money() {\n    return {\n      type: TYPES.Money\n    };\n  },\n  Binary: function Binary(length) {\n    return {\n      type: TYPES.Binary,\n      length: length\n    };\n  },\n  VarBinary: function VarBinary(length) {\n    return {\n      type: TYPES.VarBinary,\n      length: length\n    };\n  },\n  Image: function Image() {\n    return {\n      type: TYPES.Image\n    };\n  },\n  Xml: function Xml() {\n    return {\n      type: TYPES.Xml\n    };\n  },\n  Char: function Char(length) {\n    return {\n      type: TYPES.Char,\n      length: length\n    };\n  },\n  NChar: function NChar(length) {\n    return {\n      type: TYPES.NChar,\n      length: length\n    };\n  },\n  NText: function NText() {\n    return {\n      type: TYPES.NText\n    };\n  },\n  TVP: function TVP(tvpType) {\n    return {\n      type: TYPES.TVP,\n      tvpType: tvpType\n    };\n  },\n  UDT: function UDT() {\n    return {\n      type: TYPES.UDT\n    };\n  },\n  Geography: function Geography() {\n    return {\n      type: TYPES.Geography\n    };\n  },\n  Geometry: function Geometry() {\n    return {\n      type: TYPES.Geometry\n    };\n  },\n  Variant: function Variant() {\n    return {\n      type: TYPES.Variant\n    };\n  }\n};\nmodule.exports.TYPES = TYPES;\nmodule.exports.DECLARATIONS = {};\n\nvar zero = function zero(value, length) {\n  if (length == null) length = 2;\n  value = String(value);\n\n  if (value.length < length) {\n    for (var i = 1; i <= length - value.length; i++) {\n      value = \"0\".concat(value);\n    }\n  }\n\n  return value;\n};\n\nfor (var key in TYPES) {\n  if (objectHasProperty(TYPES, key)) {\n    var value = TYPES[key];\n    value.declaration = key.toLowerCase();\n    module.exports.DECLARATIONS[value.declaration] = value;\n\n    (function (key, value) {\n      value[inspect] = function () {\n        return \"[sql.\".concat(key, \"]\");\n      };\n    })(key, value);\n  }\n}\n\nmodule.exports.declare = function (type, options) {\n  switch (type) {\n    case TYPES.VarChar:\n    case TYPES.VarBinary:\n      return \"\".concat(type.declaration, \" (\").concat(options.length > 8000 ? 'MAX' : options.length == null ? 'MAX' : options.length, \")\");\n\n    case TYPES.NVarChar:\n      return \"\".concat(type.declaration, \" (\").concat(options.length > 4000 ? 'MAX' : options.length == null ? 'MAX' : options.length, \")\");\n\n    case TYPES.Char:\n    case TYPES.NChar:\n    case TYPES.Binary:\n      return \"\".concat(type.declaration, \" (\").concat(options.length == null ? 1 : options.length, \")\");\n\n    case TYPES.Decimal:\n    case TYPES.Numeric:\n      return \"\".concat(type.declaration, \" (\").concat(options.precision == null ? 18 : options.precision, \", \").concat(options.scale == null ? 0 : options.scale, \")\");\n\n    case TYPES.Time:\n    case TYPES.DateTime2:\n    case TYPES.DateTimeOffset:\n      return \"\".concat(type.declaration, \" (\").concat(options.scale == null ? 7 : options.scale, \")\");\n\n    case TYPES.TVP:\n      return \"\".concat(options.tvpType, \" readonly\");\n\n    default:\n      return type.declaration;\n  }\n};\n\nmodule.exports.cast = function (value, type, options) {\n  if (value == null) {\n    return null;\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return \"N'\".concat(value.replace(/'/g, '\\'\\''), \"'\");\n\n    case 'number':\n      return value;\n\n    case 'boolean':\n      return value ? 1 : 0;\n\n    case 'object':\n      if (value instanceof Date) {\n        var ns = value.getUTCMilliseconds() / 1000;\n\n        if (value.nanosecondDelta != null) {\n          ns += value.nanosecondDelta;\n        }\n\n        var scale = options.scale == null ? 7 : options.scale;\n\n        if (scale > 0) {\n          ns = String(ns).substr(1, scale + 1);\n        } else {\n          ns = '';\n        }\n\n        return \"N'\".concat(value.getUTCFullYear(), \"-\").concat(zero(value.getUTCMonth() + 1), \"-\").concat(zero(value.getUTCDate()), \" \").concat(zero(value.getUTCHours()), \":\").concat(zero(value.getUTCMinutes()), \":\").concat(zero(value.getUTCSeconds())).concat(ns, \"'\");\n      } else if (Buffer.isBuffer(value)) {\n        return \"0x\".concat(value.toString('hex'));\n      }\n\n      return null;\n\n    default:\n      return null;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}