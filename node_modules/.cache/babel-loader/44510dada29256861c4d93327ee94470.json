{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar constants = require('./constants');\n\nvar Logger = require('./log').Logger;\n\nvar Mex = require('./mex');\n\nvar OAuth2Client = require('./oauth2client');\n\nvar OAuth2Parameters = constants.OAuth2.Parameters;\nvar TokenResponseFields = constants.TokenResponseFields;\nvar OAuth2GrantType = constants.OAuth2.GrantType;\nvar OAuth2Scope = constants.OAuth2.Scope;\n/**\r\n * Constructs a new CodeRequest object.\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {AuthenticationContext} authenticationContext\r\n * @param {string} resource\r\n * @param {string} clientId\r\n */\n// TODO: probably need to modify the parameter list. \n\nfunction CodeRequest(callContext, authenticationContext, clientId, resource) {\n  this._log = new Logger('DeviceCodeRequest', callContext._logContext);\n  this._callContext = callContext;\n  this._authenticationContext = authenticationContext;\n  this._resource = resource;\n  this._clientId = clientId; // This should be set at the beginning of getToken\n  // functions that have a userId.\n\n  this._userId = null;\n}\n\n;\n/**\r\n * Get user code info. \r\n * @private\r\n * @param {object} oauthParameters containing all the parameters needed to get the user code info. \r\n * @param {callback} callback\r\n */\n\nCodeRequest.prototype._getUserCodeInfo = function (oauthParameters, callback) {\n  var oauth2Client = this._createOAuth2Client();\n\n  oauth2Client.getUserCodeInfo(oauthParameters, callback);\n};\n\nCodeRequest.prototype._createOAuth2Client = function () {\n  return new OAuth2Client(this._callContext, this._authenticationContext._authority);\n};\n/**\r\n * Creates a set of basic, common, OAuthParameters based on values that the CodeRequest was created with.\r\n * @private\r\n * @return {object} containing all the basic parameters. \r\n */\n\n\nCodeRequest.prototype._createOAuthParameters = function () {\n  var oauthParameters = {};\n  oauthParameters[OAuth2Parameters.CLIENT_ID] = this._clientId;\n  oauthParameters[OAuth2Parameters.RESOURCE] = this._resource;\n  return oauthParameters;\n};\n/**\r\n * Get the user code information. \r\n * @param {string} language optional parameter used to get the user code info. \r\n * @param {callback} callback\r\n */\n\n\nCodeRequest.prototype.getUserCodeInfo = function (language, callback) {\n  this._log.info('Getting user code info.');\n\n  var oauthParameters = this._createOAuthParameters();\n\n  if (language) {\n    oauthParameters[OAuth2Parameters.LANGUAGE] = language;\n  }\n\n  this._getUserCodeInfo(oauthParameters, callback);\n};\n\nmodule.exports = CodeRequest;","map":null,"metadata":{},"sourceType":"script"}