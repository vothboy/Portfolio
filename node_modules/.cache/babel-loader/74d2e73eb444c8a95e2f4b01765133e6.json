{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar uuid = require('uuid'); // want to replace with this in the future: https://gist.github.com/jed/982883\n\n\nvar LEVEL_STRING_MAP = {\n  0: 'ERROR:',\n  1: 'WARNING:',\n  2: 'INFO:',\n  3: 'VERBOSE:'\n};\n/**\r\n * Methods for controling global logging options for ADAL\r\n * @namespace\r\n */\n\nvar Logging = {\n  /**\r\n   * @callback LoggingCallback\r\n   * @memberOf Logging\r\n   * @param {Logging.LOGGING_LEVEL} level The level of this log entry.\r\n   * @param {string} message The text content of the log entry.\r\n   * @param {Error}  [error] An Error object if this is an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n   */\n\n  /**\r\n   * @typedef LoggingOptions\r\n   * @memberOf Logging\r\n   * @property {LoggingCallback} [log] The function to call when ADAL generates a log entry.\r\n   * @property {Logging.LOGGING_LEVEL} [level] The maximum level of log entries to generate.\r\n   */\n\n  /**\r\n   * Describes the available logging levels.\r\n   * @enum\r\n   * @type {Number}\r\n   */\n  LOGGING_LEVEL: {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    VERBOSE: 3\n  },\n\n  /**\r\n   * Sets global logging options for ADAL.\r\n   * @param {LoggingOptions} options\r\n   */\n  setLoggingOptions: function setLoggingOptions(options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (options.log) {\n      if (!_.isFunction(options.log)) {\n        throw new Error('setLogOptions expects the log key in the options parameter to be a function');\n      }\n    } else {\n      // if no log function was passed set it to a default no op function.\n      options.log = function () {};\n    }\n\n    if (options.level) {\n      var level = options.level;\n\n      if (level < 0 || level > 3) {\n        throw new Error('setLogOptions expects the level key to be in the range 0 to 3 inclusive');\n      }\n    } else {\n      options.level = this.LOGGING_LEVEL.ERROR;\n    }\n\n    if (options.loggingWithPII != true) {\n      options.loggingWithPII = false;\n    }\n\n    this.LogOptions = options;\n  },\n\n  /**\r\n   * Get's the current global logging options.\r\n   * @return {LoggingOptions}\r\n   */\n  getLoggingOptions: function getLoggingOptions() {\n    return this.LogOptions;\n  },\n\n  /**\r\n   * Stores the current global logging options.\r\n   * @private\r\n   * @type {LoggingOptions}\r\n   */\n  LogOptions: {\n    log: function log() {},\n    level: 0,\n    loggingWithPII: false\n  }\n};\n/**\r\n * An internal logging object.\r\n * @class\r\n * @private\r\n * @param {string} componentName The name of the component that created this instance.  This name will be\r\n *                               prepended to the beginning of all log entries generated by this instance.\r\n */\n\nfunction Logger(componentName, logContext) {\n  if (!logContext) {\n    throw new Error('Logger: logContext is a required parameter');\n  }\n\n  this._componentName = componentName;\n  this._logContext = logContext;\n}\n\nObject.defineProperty(Logger.prototype, 'context', {\n  get: function get() {\n    return this._logContext;\n  }\n});\n/**\r\n * Generates a log entry\r\n * @param  {Logging.LOGGING_LEVEL} level The level of this log entry\r\n * @param  {string|function} message A message string, or a function that returns a message string, to log.\r\n * @param  {Error} [error] If this is a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry then the caller\r\n *                       should pass an error object in this parameter.\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\nLogger.prototype.log = function (level, message, error, containsPII) {\n  if (containsPII == true && !Logging.LogOptions.loggingWithPII) {\n    return;\n  }\n\n  if (level <= Logging.LogOptions.level) {\n    if (_.isFunction(message)) {\n      message = message();\n    }\n\n    var correlationId = this._logContext.correlationId || '<no correlation id>';\n    var timeStamp = new Date().toUTCString();\n    var formattedMessage = timeStamp + ':' + correlationId + ' - ' + this._componentName + ': ' + LEVEL_STRING_MAP[level] + ' ' + message;\n\n    if (error) {\n      formattedMessage += '\\nStack:\\n' + error.stack;\n    }\n\n    Logging.LogOptions.log(level, formattedMessage, error);\n  }\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {Error} error The Error object associated with this log entry\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.error = function (message, error, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.ERROR, message, error, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.WARN|WARN} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.warn = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.WARN, message, null, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.INFO|INFO} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.info = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.INFO, message, null, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.VERBOSE|VERBOSE} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.verbose = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.VERBOSE, message, null, containsPII);\n};\n/**\r\n * Generate a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry, as well as an\r\n * Error object to go with it.  This is a convenience method for throwing logged errors.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.createError = function (message, containsPII) {\n  var err = new Error(message);\n  this.error(message, err, containsPII);\n  return err;\n};\n/**\r\n * Creates a new log context based on the correlationId passed in.  If no correlationId is passed in\r\n * then one is generated, by the function uuid.v4()\r\n * @private\r\n */\n\n\nfunction createLogContext(correlationId) {\n  var id = correlationId || uuid.v4();\n  return {\n    correlationId: id\n  };\n}\n\nvar exports = {\n  Logging: Logging,\n  Logger: Logger,\n  createLogContext: createLogContext\n};\nmodule.exports = exports;","map":null,"metadata":{},"sourceType":"script"}