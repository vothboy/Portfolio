{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceLookup = void 0;\n\nvar _sender = require(\"./sender\");\n\nvar SQL_SERVER_BROWSER_PORT = 1434;\nvar TIMEOUT = 2 * 1000;\nvar RETRIES = 3; // There are three bytes at the start of the response, whose purpose is unknown.\n\nvar MYSTERY_HEADER_LENGTH = 3; // Most of the functionality has been determined from from jTDS's MSSqlServerInfo class.\n\nvar InstanceLookup = /*#__PURE__*/function () {\n  function InstanceLookup() {\n    _classCallCheck(this, InstanceLookup);\n  }\n\n  _createClass(InstanceLookup, [{\n    key: \"createSender\",\n    // Wrapper allows for stubbing Sender when unit testing instance-lookup.\n    value: function createSender(host, port, request) {\n      return new _sender.Sender(host, port, request);\n    }\n  }, {\n    key: \"instanceLookup\",\n    value: function instanceLookup(options, callback) {\n      var _this = this;\n\n      var server = options.server;\n\n      if (typeof server !== 'string') {\n        throw new TypeError('Invalid arguments: \"server\" must be a string');\n      }\n\n      var instanceName = options.instanceName;\n\n      if (typeof instanceName !== 'string') {\n        throw new TypeError('Invalid arguments: \"instanceName\" must be a string');\n      }\n\n      var timeout = options.timeout === undefined ? TIMEOUT : options.timeout;\n\n      if (typeof timeout !== 'number') {\n        throw new TypeError('Invalid arguments: \"timeout\" must be a number');\n      }\n\n      var retries = options.retries === undefined ? RETRIES : options.retries;\n\n      if (typeof retries !== 'number') {\n        throw new TypeError('Invalid arguments: \"retries\" must be a number');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError('Invalid arguments: \"callback\" must be a function');\n      }\n\n      var sender;\n      var timer;\n      var retriesLeft = retries;\n\n      var onTimeout = function onTimeout() {\n        sender.cancel();\n        makeAttempt();\n      };\n\n      var makeAttempt = function makeAttempt() {\n        if (retriesLeft > 0) {\n          retriesLeft--;\n          var request = Buffer.from([0x02]);\n          sender = _this.createSender(options.server, SQL_SERVER_BROWSER_PORT, request);\n          sender.execute(function (err, response) {\n            clearTimeout(timer);\n\n            if (err) {\n              callback('Failed to lookup instance on ' + server + ' - ' + err.message);\n            } else {\n              var message = response.toString('ascii', MYSTERY_HEADER_LENGTH);\n\n              var port = _this.parseBrowserResponse(message, instanceName);\n\n              if (port) {\n                callback(undefined, port);\n              } else {\n                callback('Port for ' + instanceName + ' not found in ' + options.server);\n              }\n            }\n          });\n          timer = setTimeout(onTimeout, timeout);\n        } else {\n          callback('Failed to get response from SQL Server Browser on ' + server);\n        }\n      };\n\n      makeAttempt();\n    }\n  }, {\n    key: \"parseBrowserResponse\",\n    value: function parseBrowserResponse(response, instanceName) {\n      var getPort;\n      var instances = response.split(';;');\n\n      for (var i = 0, len = instances.length; i < len; i++) {\n        var instance = instances[i];\n        var parts = instance.split(';');\n\n        for (var p = 0, partsLen = parts.length; p < partsLen; p += 2) {\n          var name = parts[p];\n          var value = parts[p + 1];\n\n          if (name === 'tcp' && getPort) {\n            var port = parseInt(value, 10);\n            return port;\n          }\n\n          if (name === 'InstanceName') {\n            if (value.toUpperCase() === instanceName.toUpperCase()) {\n              getPort = true;\n            } else {\n              getPort = false;\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return InstanceLookup;\n}();\n\nexports.InstanceLookup = InstanceLookup;","map":null,"metadata":{},"sourceType":"script"}