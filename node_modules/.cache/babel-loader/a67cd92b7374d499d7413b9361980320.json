{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar NULL = (1 << 16) - 1;\nvar Binary = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    var value = parameter.value;\n    var length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function resolveLength(parameter) {\n    var value = parameter.value;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt16LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt16LE(parameter.length);\n      buffer.writeBuffer(parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength));\n    } else {\n      buffer.writeUInt16LE(NULL);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = Binary;\nexports.default = _default;\nmodule.exports = Binary;","map":null,"metadata":{},"sourceType":"script"}