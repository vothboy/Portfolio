{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\vothb\\\\Desktop\\\\School\\\\Quarter_5\\\\CIS259\\\\Plankcooking-microservices\\\\Plankcooking\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _errors = require(\"./errors\");\n\nvar Request = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Request, _events$EventEmitter);\n\n  function Request(sqlTextOrProcedure, callback) {\n    var _this;\n\n    _classCallCheck(this, Request);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Request).call(this));\n    _this.sqlTextOrProcedure = void 0;\n    _this.parameters = void 0;\n    _this.parametersByName = void 0;\n    _this.originalParameters = void 0;\n    _this.preparing = void 0;\n    _this.canceled = void 0;\n    _this.paused = void 0;\n    _this.userCallback = void 0;\n    _this.handle = void 0;\n    _this.error = void 0;\n    _this.connection = void 0;\n    _this.timeout = void 0;\n    _this.rows = void 0;\n    _this.rst = void 0;\n    _this.rowCount = void 0;\n    _this.callback = void 0;\n    _this.sqlTextOrProcedure = sqlTextOrProcedure;\n    _this.parameters = [];\n    _this.parametersByName = {};\n    _this.originalParameters = [];\n    _this.preparing = false;\n    _this.handle = undefined;\n    _this.canceled = false;\n    _this.paused = false;\n    _this.error = undefined;\n    _this.connection = undefined;\n    _this.timeout = undefined;\n    _this.userCallback = callback;\n\n    _this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n\n    return _this;\n  } // TODO: `type` must be a valid TDS value type\n\n\n  _createClass(Request, [{\n    key: \"addParameter\",\n    value: function addParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      var _options = options,\n          _options$output = _options.output,\n          output = _options$output === void 0 ? false : _options$output,\n          length = _options.length,\n          precision = _options.precision,\n          scale = _options.scale;\n      var parameter = {\n        type: type,\n        name: name,\n        value: value,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale\n      };\n      this.parameters.push(parameter);\n      this.parametersByName[name] = parameter;\n    } // TODO: `type` must be a valid TDS value type\n\n  }, {\n    key: \"addOutputParameter\",\n    value: function addOutputParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      options.output = true;\n      this.addParameter(name, type, value, options);\n    }\n  }, {\n    key: \"makeParamsParameter\",\n    value: function makeParamsParameter(parameters) {\n      var paramsParameter = '';\n\n      for (var i = 0, len = parameters.length; i < len; i++) {\n        var parameter = parameters[i];\n\n        if (paramsParameter.length > 0) {\n          paramsParameter += ', ';\n        }\n\n        paramsParameter += '@' + parameter.name + ' ';\n        paramsParameter += parameter.type.declaration(parameter);\n\n        if (parameter.output) {\n          paramsParameter += ' OUTPUT';\n        }\n      }\n\n      return paramsParameter;\n    }\n  }, {\n    key: \"transformIntoExecuteSqlRpc\",\n    value: function transformIntoExecuteSqlRpc() {\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addParameter('statement', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n\n      if (this.originalParameters.length) {\n        this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n      }\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        this.parameters.push(parameter);\n      }\n\n      this.sqlTextOrProcedure = 'sp_executesql';\n    }\n  }, {\n    key: \"transformIntoPrepareRpc\",\n    value: function transformIntoPrepareRpc() {\n      var _this2 = this;\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addOutputParameter('handle', _dataType.typeByName.Int, undefined);\n      this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n      this.addParameter('stmt', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n      this.sqlTextOrProcedure = 'sp_prepare';\n      this.preparing = true;\n      this.on('returnValue', function (name, value) {\n        if (name === 'handle') {\n          _this2.handle = value;\n        } else {\n          _this2.error = (0, _errors.RequestError)(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n        }\n      });\n    }\n  }, {\n    key: \"transformIntoUnprepareRpc\",\n    value: function transformIntoUnprepareRpc() {\n      this.parameters = [];\n      this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n      this.sqlTextOrProcedure = 'sp_unprepare';\n    }\n  }, {\n    key: \"transformIntoExecuteRpc\",\n    value: function transformIntoExecuteRpc(parameters) {\n      this.parameters = [];\n      this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        parameter.value = parameters[parameter.name];\n        this.parameters.push(parameter);\n      }\n\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.sqlTextOrProcedure = 'sp_execute';\n    }\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters() {\n      for (var i = 0, len = this.parameters.length; i < len; i++) {\n        var parameter = this.parameters[i];\n        var value = parameter.type.validate(parameter.value);\n\n        if (value instanceof TypeError) {\n          return this.error = new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n        }\n\n        parameter.value = value;\n      }\n\n      return null;\n    } // Temporarily suspends the flow of data from the database.\n    // No more 'row' events will be emitted until resume() is called.\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n\n      this.paused = true;\n\n      if (this.connection) {\n        this.connection.pauseRequest(this);\n      }\n    } // Resumes the flow of data from the database.\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n\n      if (this.connection) {\n        this.connection.resumeRequest(this);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n\n  return Request;\n}(_events.EventEmitter);\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":null,"metadata":{},"sourceType":"script"}